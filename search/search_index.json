{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Atmo Lab","text":""},{"location":"#intro","title":"Intro","text":"<p>This is the project that observes the varing of global temperature for the first half of 2021. </p> <p>Hope you guys enjoy!!! And be helpful for the one who also interested in Atmospheric Science.</p>"},{"location":"#create-enviroment","title":"Create Enviroment","text":"<p><code>MacOS 11.5.2</code> <code>conda --version: 4.11.0</code> <pre><code>$ conda create --name atmpy38 python=3.8\n$ conda activate atmpy38\n</code></pre></p>"},{"location":"#build-web","title":"Build web","text":"<pre><code>pip install mkdocs\npip install mkdocs-material\npip install pymdown-extensions\npip install mkdocstrings\npip install mkdocs-git-revision-date-plugin\npip install mkdocs-jupyter\n\nmkdocs serve\nmkdocs build\n</code></pre>"},{"location":"#under-atmpy38","title":"Under atmpy38","text":"<pre><code>$ conda install numpy\n$ conda install matplotlib\n$ conda install -c anaconda basemap\n$ conda install -c conda-forge basemap-data-hires\n$ conda install -c conda-forge metpy\n$ conda install pandas\n$ conda install netcdf4\n$ conda install -c conda-forge cartopy\n</code></pre>"},{"location":"#verify-version","title":"Verify version","text":"<pre><code>$ conda --version\nconda 4.11.0\n\n$ python --version\nPython 3.8.16\n\n$ python\n&gt;&gt;&gt; from mpl.toolkits.basemap import Basemap\n&gt;&gt;&gt; quit()\n</code></pre>"},{"location":"#project-showcase","title":"Project Showcase","text":"Name Display Global Surface Temperature Draw TAIWAN $CO_2$ Emission"},{"location":"#license","title":"LICENSE","text":"<p>Released under MIT by @1chooo.</p> <ul> <li>This software can be modified and reused without restriction.</li> <li>The original license must be included with any copies of this software.</li> <li>If a significant portion of the source code is used, please provide a link back to this repository.</li> </ul>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#create-enviroment","title":"Create Enviroment","text":"<p><code>MacOS 11.5.2</code> <code>conda --version: 4.11.0</code> <pre><code>$ conda create --name atmpy38 python=3.8\n$ conda activate atmpy38\n</code></pre></p>"},{"location":"usage/#build-web","title":"Build web","text":"<pre><code>pip install numpy\npip install matplotlib\npip install basemap\npip install basemap-data-hires\npip install metpy\npip install pandas\npip install netcdf4\npip install cartopy\n\npip install mkdocs\npip install mkdocs-material\npip install pymdown-extensions\npip install mkdocstrings\npip install mkdocs-git-revision-date-plugin\npip install mkdocs-jupyter\n\nconda install -c conda-forge mkdocs\nconda install -c conda-forge mkdocs-material\nconda install -c conda-forge pymdown-extensions\nconda install -c conda-forge mkdocstrings\nconda install -c conda-forge mkdocs-git-revision-date-plugin\nconda install -c conda-forge mkdocs-jupyter\n\nmkdocs serve\nmkdocs build\n</code></pre>"},{"location":"usage/#under-atmpy38","title":"Under atmpy38","text":"<pre><code>$ conda install numpy\n$ conda install matplotlib\n$ conda install -c anaconda basemap\n$ conda install -c conda-forge basemap-data-hires\n$ conda install -c conda-forge metpy\n$ conda install pandas\n$ conda install netcdf4\n$ conda install -c conda-forge cartopy\n</code></pre>"},{"location":"usage/#verify-version","title":"Verify version","text":"<pre><code>$ conda --version\nconda 4.11.0\n\n$ python --version\nPython 3.8.16\n\n$ python\n&gt;&gt;&gt; from mpl.toolkits.basemap import Basemap\n&gt;&gt;&gt; quit()\n</code></pre>"},{"location":"fortran_basic/01_hello_world/","title":"[Fortran] 01 Hello World","text":"<p>This is our first program to reach out to the programming world!</p> <pre><code>PROGRAM HELLO_WORLD\nIMPLICIT NONE\n\n  print*, \"Hello World\"\n\nSTOP\nEND\n</code></pre>"},{"location":"python_basic/01_hello_world/","title":"[Python] 01 Hello World","text":"In\u00a0[1]: Copied! <pre>print('Hello World')\n</pre> print('Hello World') <pre>Hello World\n</pre>"},{"location":"python_basic/01_hello_world/#python-01-hello-world","title":"[Python] 01 Hello World\u00b6","text":""},{"location":"showcase/pibal_obs/","title":"Pibal Analysis","text":"In\u00a0[1]: Copied! <pre>import csv\nimport math\nimport matplotlib.pyplot as plt\n</pre> import csv import math import matplotlib.pyplot as plt In\u00a0[2]: Copied! <pre>time, wd, elevation = 0, 0, 0\nlist_time, list_wd, list_elevation = [], [], []\n</pre> time, wd, elevation = 0, 0, 0 list_time, list_wd, list_elevation = [], [], [] In\u00a0[3]: Copied! <pre>inputFile = open(\"./data/pibal_data.csv\", 'r')\ndataReader = csv.reader(inputFile)\n\nfor line in dataReader:\n\n    time = line[0]\n    wd = line[1]\n    elevation = line[2]\n\n    list_time.append(time)\n    list_wd.append(wd)\n    list_elevation.append(elevation)\n\ninputFile.close()\n</pre> inputFile = open(\"./data/pibal_data.csv\", 'r') dataReader = csv.reader(inputFile)  for line in dataReader:      time = line[0]     wd = line[1]     elevation = line[2]      list_time.append(time)     list_wd.append(wd)     list_elevation.append(elevation)  inputFile.close() In\u00a0[4]: Copied! <pre>del list_time[0]\ndel list_wd[0]\ndel list_elevation[0]\n\nlist_time_float, list_wd_float, list_elevation_float = [], [], []\n\nfor i in range(len(list_time)):\n    time = float(list_time[i])\n    list_time_float.append(time)\n\n    wd = float(list_wd[i])\n    list_wd_float.append(wd)\n\n    elevation = float(list_elevation[i])\n    list_elevation_float.append(elevation)\n</pre> del list_time[0] del list_wd[0] del list_elevation[0]  list_time_float, list_wd_float, list_elevation_float = [], [], []  for i in range(len(list_time)):     time = float(list_time[i])     list_time_float.append(time)      wd = float(list_wd[i])     list_wd_float.append(wd)      elevation = float(list_elevation[i])     list_elevation_float.append(elevation) In\u00a0[5]: Copied! <pre>list_height = []\ninitial = 6.26\nvector = 150.0 / 60.0\n\nfor i in list_time_float:\n    height = i * vector\n    height = initial + height\n    list_height.append(height)\n\nprint(\"Height:\", list_height)\n\nlist_ele_rad = []\nfor i in range(len(list_elevation_float)):\n    angle = math.radians(list_elevation_float[i])\n    angle = round(angle, 3)\n    list_ele_rad.append(angle)\n\nprint(\"elevation in rad:\", list_ele_rad)\n\nlist_wd_rad = []\nangle = 0\nfor i in range(len(list_wd_float)):\n    angle = math.radians(list_wd_float[i])\n    angle = round(angle, 3)\n    list_wd_rad.append(angle)\n\nprint(\"wind direction in rad:\", list_wd_rad)\n\nlist_distance = []\nd = 0\nfor i in range(0, 78):\n    d = list_height[i] / math.tan(list_ele_rad[i])\n    d = round(d, 3)\n    list_distance.append(d)\n\nprint(\"Horizontal distance:\", list_distance)\n</pre> list_height = [] initial = 6.26 vector = 150.0 / 60.0  for i in list_time_float:     height = i * vector     height = initial + height     list_height.append(height)  print(\"Height:\", list_height)  list_ele_rad = [] for i in range(len(list_elevation_float)):     angle = math.radians(list_elevation_float[i])     angle = round(angle, 3)     list_ele_rad.append(angle)  print(\"elevation in rad:\", list_ele_rad)  list_wd_rad = [] angle = 0 for i in range(len(list_wd_float)):     angle = math.radians(list_wd_float[i])     angle = round(angle, 3)     list_wd_rad.append(angle)  print(\"wind direction in rad:\", list_wd_rad)  list_distance = [] d = 0 for i in range(0, 78):     d = list_height[i] / math.tan(list_ele_rad[i])     d = round(d, 3)     list_distance.append(d)  print(\"Horizontal distance:\", list_distance) <pre>Height: [6.26, 81.26, 156.26, 231.26, 306.26, 381.26, 456.26, 531.26, 606.26, 681.26, 756.26, 831.26, 906.26, 981.26, 1056.26, 1131.26, 1206.26, 1281.26, 1356.26, 1431.26, 1506.26, 1581.26, 1656.26, 1731.26, 1806.26, 1881.26, 1956.26, 2031.26, 2106.26, 2181.26, 2256.26, 2331.26, 2406.26, 2481.26, 2556.26, 2631.26, 2706.26, 2781.26, 2856.26, 2931.26, 3006.26, 3081.26, 3156.26, 3231.26, 3306.26, 3381.26, 3456.26, 3531.26, 3606.26, 3681.26, 3756.26, 3831.26, 3906.26, 3981.26, 4056.26, 4131.26, 4206.26, 4281.26, 4356.26, 4431.26, 4506.26, 4581.26, 4656.26, 4731.26, 4806.26, 4881.26, 4956.26, 5031.26, 5106.26, 5181.26, 5256.26, 5331.26, 5406.26, 5481.26, 5556.26, 5631.26, 5706.26, 5781.26]\nelevation in rad: [0.096, 0.548, 0.637, 0.688, 0.703, 0.691, 0.679, 0.688, 0.714, 0.768, 0.857, 0.96, 1.047, 1.122, 1.178, 1.215, 1.26, 1.318, 1.408, 1.477, 1.539, 1.501, 1.443, 1.388, 1.344, 1.3, 1.251, 1.197, 1.161, 1.133, 1.107, 1.084, 1.065, 1.042, 1.028, 1.009, 0.983, 0.96, 0.937, 0.915, 0.894, 0.874, 0.857, 0.841, 0.826, 0.812, 0.792, 0.775, 0.761, 0.747, 0.73, 0.712, 0.696, 0.675, 0.653, 0.635, 0.614, 0.595, 0.574, 0.56, 0.545, 0.531, 0.518, 0.506, 0.496, 0.485, 0.476, 0.468, 0.457, 0.447, 0.438, 0.426, 0.417, 0.412, 0.401, 0.394, 0.387, 0.382]\nwind direction in rad: [2.251, 2.766, 2.92, 2.971, 2.939, 2.859, 2.806, 2.81, 2.848, 2.908, 2.995, 3.152, 3.164, 3.567, 3.794, 4.047, 4.171, 4.285, 4.506, 4.538, 3.56, 2.171, 1.979, 1.869, 1.824, 1.738, 1.677, 1.606, 1.531, 1.443, 1.415, 1.4, 1.377, 1.353, 1.312, 1.264, 1.23, 1.204, 1.178, 1.157, 1.141, 1.124, 1.119, 1.11, 1.098, 1.08, 1.065, 1.045, 1.035, 1.037, 1.052, 1.084, 1.119, 1.161, 1.208, 1.239, 1.265, 1.292, 1.316, 1.335, 1.347, 1.353, 1.351, 1.344, 1.332, 1.316, 1.302, 1.286, 1.272, 1.262, 1.25, 1.239, 1.232, 1.227, 1.223, 1.223, 1.222, 1.223]\nHorizontal distance: [65.008, 133.135, 211.193, 281.345, 361.399, 461.005, 565.372, 646.318, 699.659, 705.388, 655.036, 581.969, 523.468, 472.547, 437.638, 420.389, 387.458, 330.979, 222.766, 134.642, 47.91, 110.546, 212.824, 320.041, 416.824, 522.267, 647.842, 796.735, 914.936, 1021.029, 1128.549, 1233.889, 1332.714, 1449.803, 1542.031, 1656.259, 1803.367, 1947.174, 2099.195, 2255.285, 2415.158, 2578.48, 2733.799, 2890.526, 3048.119, 3205.986, 3410.923, 3605.472, 3786.67, 3975.407, 4197.325, 4439.404, 4675.504, 4973.933, 5302.654, 5607.024, 5967.261, 6325.537, 6736.904, 7067.969, 7433.047, 7801.062, 8170.179, 8538.348, 8882.059, 9262.658, 9613.777, 9953.974, 10384.532, 10808.695, 11223.182, 11748.336, 12204.324, 12542.611, 13105.238, 13545.197, 14001.294, 14390.779]\n</pre> In\u00a0[6]: Copied! <pre>list_E1E2 = []\ne1e2 = 0\nfor i in range(1, len(list_height)):\n    e1e2 = (list_distance[i] * math.sin(list_wd_rad[i])) - \\\n           (list_distance[i-1] * math.sin(list_wd_rad[i-1]))\n    e1e2 = round(e1e2, 3)\n    list_E1E2.append(e1e2)\n\nprint(\"E1E2:\", list_E1E2)\n\nlist_N1N2 = []\nn1n2 = 0\nfor i in range(1, len(list_height)):\n    n1n2 = (list_distance[i] * math.cos(list_wd_rad[i])) - \\\n           (list_distance[i-1] * math.cos(list_wd_rad[i-1]))\n    n1n2 = round(n1n2, 3)\n    list_N1N2.append(n1n2)\n\nprint(\"N1N2:\", list_N1N2)\n\nalpha = 0\nlist_alpha = []\nfor i in range(len(list_E1E2)):\n    alpha = math.atan(list_E1E2[i] / list_N1N2[i])\n    alpha = round(alpha, 3)\n    list_alpha.append(alpha)\n\nprint(\"alpha:\", list_alpha)\n</pre> list_E1E2 = [] e1e2 = 0 for i in range(1, len(list_height)):     e1e2 = (list_distance[i] * math.sin(list_wd_rad[i])) - \\            (list_distance[i-1] * math.sin(list_wd_rad[i-1]))     e1e2 = round(e1e2, 3)     list_E1E2.append(e1e2)  print(\"E1E2:\", list_E1E2)  list_N1N2 = [] n1n2 = 0 for i in range(1, len(list_height)):     n1n2 = (list_distance[i] * math.cos(list_wd_rad[i])) - \\            (list_distance[i-1] * math.cos(list_wd_rad[i-1]))     n1n2 = round(n1n2, 3)     list_N1N2.append(n1n2)  print(\"N1N2:\", list_N1N2)  alpha = 0 list_alpha = [] for i in range(len(list_E1E2)):     alpha = math.atan(list_E1E2[i] / list_N1N2[i])     alpha = round(alpha, 3)     list_alpha.append(alpha)  print(\"alpha:\", list_alpha) <pre>E1E2: [-1.703, -2.42, 1.346, 24.954, 55.833, 57.644, 24.215, -7.932, -39.197, -67.599, -101.737, -5.672, -183.288, -70.674, -65.02, -1.339, 30.841, 83.17, 85.438, 113.134, 110.691, 104.113, 110.579, 97.617, 111.45, 129.208, 152.049, 117.97, 98.491, 102.178, 101.055, 91.83, 107.787, 75.127, 88.242, 120.732, 117.997, 121.675, 125.616, 130.56, 129.865, 134.135, 129.539, 124.695, 113.809, 156.293, 134.624, 137.554, 166.34, 222.672, 278.678, 282.679, 355.717, 395.393, 343.716, 389.215, 390.867, 438.109, 352.988, 375.293, 369.088, 356.85, 346.076, 310.32, 333.594, 304.948, 284.459, 371.392, 373.035, 353.183, 456.94, 403.007, 298.067, 511.935, 413.617, 424.01, 370.944]\nN1N2: [-82.967, -82.175, -71.232, -76.747, -88.712, -91.113, -77.277, -58.611, -16.51, 38.22, 66.073, 58.601, 92.907, 82.671, 88.224, 59.866, 62.478, 91.539, 22.289, -20.416, -18.66, -22.045, -9.546, -10.388, 17.499, 18.245, 40.632, 64.444, 93.727, 44.985, 34.607, 46.941, 56.61, 81.361, 105.568, 102.553, 95.555, 105.207, 103.308, 99.538, 107.744, 79.422, 91.777, 102.74, 123.027, 141.534, 156.987, 123.6, 89.514, 58.474, -4.443, -35.496, -59.515, -99.868, -55.416, -29.983, -55.681, -42.754, -46.825, -1.563, 36.005, 95.709, 138.557, 180.995, 233.735, 218.505, 243.546, 260.207, 227.998, 254.027, 288.005, 229.207, 171.526, 238.959, 149.95, 168.611, 119.586]\nalpha: [0.021, 0.029, -0.019, -0.314, -0.562, -0.564, -0.304, 0.135, 1.172, -1.056, -0.995, -0.096, -1.102, -0.707, -0.635, -0.022, 0.459, 0.738, 1.316, -1.392, -1.404, -1.362, -1.485, -1.465, 1.415, 1.431, 1.31, 1.071, 0.81, 1.156, 1.241, 1.098, 1.087, 0.746, 0.696, 0.867, 0.89, 0.858, 0.883, 0.919, 0.878, 1.036, 0.954, 0.882, 0.746, 0.835, 0.709, 0.839, 1.077, 1.314, -1.555, -1.446, -1.405, -1.323, -1.411, -1.494, -1.429, -1.474, -1.439, -1.567, 1.474, 1.309, 1.19, 1.043, 0.96, 0.949, 0.863, 0.96, 1.022, 0.947, 1.008, 1.054, 1.049, 1.134, 1.223, 1.192, 1.259]\n</pre> In\u00a0[7]: Copied! <pre>wd_list = []\nfor i in range(len(list_alpha)):\n    a = math.degrees(list_alpha[i])\n    a = a % 360\n    wd_list.append(round(a, 2))\n\nprint(\"Wind Direction:\", wd_list)\n</pre> wd_list = [] for i in range(len(list_alpha)):     a = math.degrees(list_alpha[i])     a = a % 360     wd_list.append(round(a, 2))  print(\"Wind Direction:\", wd_list) <pre>Wind Direction: [1.2, 1.66, 358.91, 342.01, 327.8, 327.69, 342.58, 7.73, 67.15, 299.5, 302.99, 354.5, 296.86, 319.49, 323.62, 358.74, 26.3, 42.28, 75.4, 280.24, 279.56, 281.96, 274.92, 276.06, 81.07, 81.99, 75.06, 61.36, 46.41, 66.23, 71.1, 62.91, 62.28, 42.74, 39.88, 49.68, 50.99, 49.16, 50.59, 52.65, 50.31, 59.36, 54.66, 50.53, 42.74, 47.84, 40.62, 48.07, 61.71, 75.29, 270.91, 277.15, 279.5, 284.2, 279.16, 274.4, 278.12, 275.55, 277.55, 270.22, 84.45, 75.0, 68.18, 59.76, 55.0, 54.37, 49.45, 55.0, 58.56, 54.26, 57.75, 60.39, 60.1, 64.97, 70.07, 68.3, 72.14]\n</pre> In\u00a0[8]: Copied! <pre>pP_qP = 0\nws_list = []\nlist_pP_qP = []\n\nfor i in range(len(list_E1E2)):\n    pP_qP = list_E1E2[i] / math.sin(math.radians(wd_list[i]))\n    list_pP_qP.append(pP_qP)\n    ws = pP_qP / 30.0\n    ws = abs(round(ws, 2))\n    ws_list.append(ws)\n\nprint(\"Wind Speed:\", ws_list)\n</pre> pP_qP = 0 ws_list = [] list_pP_qP = []  for i in range(len(list_E1E2)):     pP_qP = list_E1E2[i] / math.sin(math.radians(wd_list[i]))     list_pP_qP.append(pP_qP)     ws = pP_qP / 30.0     ws = abs(round(ws, 2))     ws_list.append(ws)  print(\"Wind Speed:\", ws_list) <pre>Wind Speed: [2.71, 2.78, 2.36, 2.69, 3.49, 3.59, 2.7, 1.97, 1.42, 2.59, 4.04, 1.97, 6.85, 3.63, 3.65, 2.03, 2.32, 4.12, 2.94, 3.83, 3.74, 3.55, 3.7, 3.27, 3.76, 4.35, 5.25, 4.48, 4.53, 3.72, 3.56, 3.44, 4.06, 3.69, 4.59, 5.28, 5.06, 5.36, 5.42, 5.47, 5.63, 5.2, 5.29, 5.38, 5.59, 7.03, 6.89, 6.16, 6.3, 7.67, 9.29, 9.5, 12.02, 13.6, 11.61, 13.01, 13.16, 14.67, 11.87, 12.51, 12.36, 12.31, 12.43, 11.97, 13.57, 12.51, 12.48, 15.11, 14.57, 14.5, 18.01, 15.45, 11.46, 18.83, 14.67, 15.21, 12.99]\n</pre> <p>After solving the data and getting the results what we want then we plot the data in the figure to let the results visualize.</p> In\u00a0[9]: Copied! <pre>plt.figure(\"Pibal's Height to Horizontal Distance\")\nplt.plot(list_distance, list_height)\nplt.xlabel(\"Horizontal Distance (m)\")\nplt.ylabel(\"Height (m)\")\nplt.legend([\"Height\"])\nplt.title(\"Pibal's Height to Distance\", fontweight = \"bold\")\nplt.grid()\n# plt.savefig('./image/Height_to_Distance.png', dpi = 300)\n\n# Because the interval is the total minus one.\nnew_height = list_height        \ndel new_height[77]              \n\nplt.figure(\"Pibal's Height to WindDirection\")\nplt.plot(new_height, wd_list)\nplt.ylabel(\"Wind Direction (degree)\")\nplt.xlabel(\"Height (m)\")\nplt.legend([\"wd\"])\nplt.title(\"Pibal's Height to WindDirection\", fontweight = \"bold\")\nplt.grid()\n# plt.savefig('./image/Pibal_Height_to_WindDirection.png', dpi = 300)\n\nplt.figure(\"Pibal's Height to WindSpeed\")\nplt.plot(ws_list, new_height)\nplt.xlabel(\"Wind Speed (m/s)\")\nplt.ylabel(\"Height (m)\")\nplt.legend([\"ws\"])\nplt.title(\"Pibal's Height to WindSpeed\", fontweight = \"bold\")\nplt.grid()\n# plt.savefig('./image/Pibal_Height_to_WindSpeed.png', dpi = 300)\nplt.show()\n</pre> plt.figure(\"Pibal's Height to Horizontal Distance\") plt.plot(list_distance, list_height) plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Height (m)\") plt.legend([\"Height\"]) plt.title(\"Pibal's Height to Distance\", fontweight = \"bold\") plt.grid() # plt.savefig('./image/Height_to_Distance.png', dpi = 300)  # Because the interval is the total minus one. new_height = list_height         del new_height[77]                plt.figure(\"Pibal's Height to WindDirection\") plt.plot(new_height, wd_list) plt.ylabel(\"Wind Direction (degree)\") plt.xlabel(\"Height (m)\") plt.legend([\"wd\"]) plt.title(\"Pibal's Height to WindDirection\", fontweight = \"bold\") plt.grid() # plt.savefig('./image/Pibal_Height_to_WindDirection.png', dpi = 300)  plt.figure(\"Pibal's Height to WindSpeed\") plt.plot(ws_list, new_height) plt.xlabel(\"Wind Speed (m/s)\") plt.ylabel(\"Height (m)\") plt.legend([\"ws\"]) plt.title(\"Pibal's Height to WindSpeed\", fontweight = \"bold\") plt.grid() # plt.savefig('./image/Pibal_Height_to_WindSpeed.png', dpi = 300) plt.show()  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"showcase/pibal_obs/#pibal-analysis","title":"Pibal Analysis\u00b6","text":"<p>The goal of this analysis is to predict the trend of pibal.</p> <p>Author: 1chooo version: 1.0.0</p>"},{"location":"showcase/pibal_obs/#import-the-package-we-need","title":"Import the package we need.\u00b6","text":""},{"location":"showcase/pibal_obs/#initialize-the-variable-we-need","title":"Initialize the variable we need.\u00b6","text":""},{"location":"showcase/pibal_obs/#get-the-data-what-we-want","title":"Get the data what We want.\u00b6","text":""},{"location":"showcase/pibal_obs/#data-pre-solving","title":"Data Pre-solving.\u00b6","text":""},{"location":"showcase/pibal_obs/#find-the-counting-circumstances","title":"Find the counting circumstances.\u00b6","text":""},{"location":"showcase/pibal_obs/#import-the-formula-and-start-to-analyze-the-wind-direction-and-wind-speed-in-high-sky","title":"Import the formula and start to analyze the wind direction and wind speed in high sky.\u00b6","text":""},{"location":"showcase/pibal_obs/#alpha-turn-into-degree","title":"alpha turn into degree\u00b6","text":""},{"location":"showcase/pibal_obs/#alpha-turn-into-x-y-axis","title":"alpha turn into x-y axis\u00b6","text":""},{"location":"showcase/thermodynamic_diagram/","title":"Thermodynamic Diagram","text":"<p>\u8aaa\u660e\uff1a\u5c07\u63a2\u7a7a\u8cc7\u6599\uff0c\u5167\u5dee\u5230\u56fa\u5b9a\u9593\u8ddd\u7684\u7db2\u683c\u4e0a(\u6bcf\u4e94\u516c\u5c3a)\uff0c\u518d\u756b\u7b49\u9ad8\u7dda\u3002</p> <p>note: \u9023\u7e8c\u7684\u4e03\u5929\u82e5\u8d85\u904e\u6708\u5e95\uff0c\u8981\u4fee\u6539\u7a0b\u5f0f!</p> <p>By TA</p> In\u00a0[1]: Copied! <pre>import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport math\n\n# \u53c3\u6578\ndaytime = 7  # \u6642\u9593\nlevel_wind = 30  # \u98a8\u7684\u5c64\u6578\nHH = 3000  # \u9ad8\u5ea6\nlevel = 600  # \u8cc7\u6599\u5c64\nDD = 14  # \u8d77\u59cb\u65e5\u671f\n\n# \u8b80\u8cc7\u6599\ndf = pd.read_csv('./data/202112_upair.txt', sep='\\s+', header=11)\ndf = df[1:]\ndf['yyyymmddhh'] = df['yyyymmddhh'].astype('int').astype('str')  # \u63db\u70ba\u6574\u6578\u518d\u63db\u70ba\u5b57\u4e32\n\np = []\nt = []\nh = []\nws = []\nwd = []\nU = []  # \u539f\u4f86\u7684\u98a8\u5834\nV = []\n\n\nU_int = []  # \u5167\u63d2\u7684\u98a8\u5834\nV_int = []\nT_int = []  # \u5167\u5dee\u7684\u6eab\u5ea6\n\n\n# \u5167\u63d2\u7684\u7db2\u683c\nx = np.linspace(DD, DD+daytime-1, 7)  # x  \t= [14 15 16 17 18 19 20]     #\u65e5\u671f\ny5 = np.linspace(0, HH, level+1)\t\t# y5 \t= [0 5 10  ...  2995 3000]\n# y100  = [0 100 200  ...  2900 3000] #\u6bcf100m\u756b\u4e00\u7b46\u98a8\u5834\ny100 = np.linspace(0, HH, level_wind+1)\n\n# ========\u8a2d\u5b9a\u8b8a\u6578==========\nfor i in range(0, daytime):\n    # print(i)\n    FT = (df['stno'] == '466920') &amp; (df['yyyymmddhh'] == '202112' +\n                                     str(DD+i)+'00') &amp; (df['Heigh'] &lt; HH) &amp; (df['Ws'] &lt; 990)  # \u8a2d\u5b9a\u689d\u4ef6\n\n    PT = df.loc[FT, 'Press']\n    TT = df.loc[FT, 'Tx']\n    HT = df.loc[FT, 'Heigh']\n    WST = df.loc[FT, 'Ws']\n    WDT = df.loc[FT, 'Wd']\n\n    p = p+[PT]    # p\u70balist\uff0c\u70bap[0]~p[6]\n    t = t+[TT]\n    h = h+[HT]\n    ws = ws+[WST]\n    wd = wd+[WDT]\n\n    uu = [-spd*1.943844*math.sin(math.radians(agl))\n          for spd, agl in zip(ws[i], wd[i])]\n    vv = [-spd*1.943844*math.cos(math.radians(agl))\n          for spd, agl in zip(ws[i], wd[i])]\n    U = U+[uu]  # unit:knot\n    V = V+[vv]\n# print(U[0]) #unit:knot\n\n# \u5167\u63d2\n    UU_int = np.interp(y5, h[i], U[i])\n    VV_int = np.interp(y5, h[i], V[i])\n    TT_int = np.interp(y5, h[i], t[i])\n    U_int = U_int + [UU_int]\n    V_int = V_int + [VV_int]\n    T_int = T_int + [TT_int]\n\n\n# \u4e32\u63a5\u8d77\u4f86\nt_con = np.concatenate([\n    T_int[0], T_int[1], \n    T_int[2], T_int[3], \n    T_int[4], T_int[5], \n    T_int[6]]\n)\nU_con = np.concatenate([\n    U_int[0], U_int[1], \n    U_int[2], U_int[3], \n    U_int[4], U_int[5], \n    U_int[6]]\n)\nV_con = np.concatenate([\n    V_int[0], V_int[1], \n    V_int[2], V_int[3], \n    V_int[4], V_int[5], \n    V_int[6]]\n)\n\n# print(len(t1_inter))\n# print(len(t))\n# \u91cd\u65b0\u5206\u914d\u70bacontourf\u53ef\u4ee5\u63a5\u53d7\u7684\u77e9\u9663\nt_con = np.reshape(t_con, (daytime, level+1)).T\nu_con = np.reshape(U_con, (daytime, level+1)).T\nv_con = np.reshape(V_con, (daytime, level+1)).T\n\n\n# ==========\u5c07\u7db2\u683c\u98a8\u5834\u6bcf100m\u53d6\u9ede==========\nVf, Uf = [], []\nfor i in range(0, level_wind+1):  # level_wind=30 (\u6b64\u8655i=0~30)\n    Uf.append(u_con[i*20])\n    Vf.append(v_con[i*20])\n\n# ========================================\n\nplt.contourf(x, y5, t_con, cmap='nipy_spectral', levels=500)  # \u4f7f\u7528\u6240\u6709\u7684\u984f\u8272\nplt.barbs(x, y100, Uf, Vf)\nplt.title(\"20211214~20211220\")\nplt.xlabel('time (day)')\nplt.ylabel('Height (m)')\nplt.colorbar()  # \u7e6a\u88fdcolorbar\nplt.show()\n</pre> import numpy as np import pandas as pd import matplotlib.pyplot as plt import math  # \u53c3\u6578 daytime = 7  # \u6642\u9593 level_wind = 30  # \u98a8\u7684\u5c64\u6578 HH = 3000  # \u9ad8\u5ea6 level = 600  # \u8cc7\u6599\u5c64 DD = 14  # \u8d77\u59cb\u65e5\u671f  # \u8b80\u8cc7\u6599 df = pd.read_csv('./data/202112_upair.txt', sep='\\s+', header=11) df = df[1:] df['yyyymmddhh'] = df['yyyymmddhh'].astype('int').astype('str')  # \u63db\u70ba\u6574\u6578\u518d\u63db\u70ba\u5b57\u4e32  p = [] t = [] h = [] ws = [] wd = [] U = []  # \u539f\u4f86\u7684\u98a8\u5834 V = []   U_int = []  # \u5167\u63d2\u7684\u98a8\u5834 V_int = [] T_int = []  # \u5167\u5dee\u7684\u6eab\u5ea6   # \u5167\u63d2\u7684\u7db2\u683c x = np.linspace(DD, DD+daytime-1, 7)  # x  \t= [14 15 16 17 18 19 20]     #\u65e5\u671f y5 = np.linspace(0, HH, level+1)\t\t# y5 \t= [0 5 10  ...  2995 3000] # y100  = [0 100 200  ...  2900 3000] #\u6bcf100m\u756b\u4e00\u7b46\u98a8\u5834 y100 = np.linspace(0, HH, level_wind+1)  # ========\u8a2d\u5b9a\u8b8a\u6578========== for i in range(0, daytime):     # print(i)     FT = (df['stno'] == '466920') &amp; (df['yyyymmddhh'] == '202112' +                                      str(DD+i)+'00') &amp; (df['Heigh'] &lt; HH) &amp; (df['Ws'] &lt; 990)  # \u8a2d\u5b9a\u689d\u4ef6      PT = df.loc[FT, 'Press']     TT = df.loc[FT, 'Tx']     HT = df.loc[FT, 'Heigh']     WST = df.loc[FT, 'Ws']     WDT = df.loc[FT, 'Wd']      p = p+[PT]    # p\u70balist\uff0c\u70bap[0]~p[6]     t = t+[TT]     h = h+[HT]     ws = ws+[WST]     wd = wd+[WDT]      uu = [-spd*1.943844*math.sin(math.radians(agl))           for spd, agl in zip(ws[i], wd[i])]     vv = [-spd*1.943844*math.cos(math.radians(agl))           for spd, agl in zip(ws[i], wd[i])]     U = U+[uu]  # unit:knot     V = V+[vv] # print(U[0]) #unit:knot  # \u5167\u63d2     UU_int = np.interp(y5, h[i], U[i])     VV_int = np.interp(y5, h[i], V[i])     TT_int = np.interp(y5, h[i], t[i])     U_int = U_int + [UU_int]     V_int = V_int + [VV_int]     T_int = T_int + [TT_int]   # \u4e32\u63a5\u8d77\u4f86 t_con = np.concatenate([     T_int[0], T_int[1],      T_int[2], T_int[3],      T_int[4], T_int[5],      T_int[6]] ) U_con = np.concatenate([     U_int[0], U_int[1],      U_int[2], U_int[3],      U_int[4], U_int[5],      U_int[6]] ) V_con = np.concatenate([     V_int[0], V_int[1],      V_int[2], V_int[3],      V_int[4], V_int[5],      V_int[6]] )  # print(len(t1_inter)) # print(len(t)) # \u91cd\u65b0\u5206\u914d\u70bacontourf\u53ef\u4ee5\u63a5\u53d7\u7684\u77e9\u9663 t_con = np.reshape(t_con, (daytime, level+1)).T u_con = np.reshape(U_con, (daytime, level+1)).T v_con = np.reshape(V_con, (daytime, level+1)).T   # ==========\u5c07\u7db2\u683c\u98a8\u5834\u6bcf100m\u53d6\u9ede========== Vf, Uf = [], [] for i in range(0, level_wind+1):  # level_wind=30 (\u6b64\u8655i=0~30)     Uf.append(u_con[i*20])     Vf.append(v_con[i*20])  # ========================================  plt.contourf(x, y5, t_con, cmap='nipy_spectral', levels=500)  # \u4f7f\u7528\u6240\u6709\u7684\u984f\u8272 plt.barbs(x, y100, Uf, Vf) plt.title(\"20211214~20211220\") plt.xlabel('time (day)') plt.ylabel('Height (m)') plt.colorbar()  # \u7e6a\u88fdcolorbar plt.show() <p>By @1chooo</p> In\u00a0[2]: Copied! <pre>import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport math\n\ndef calculate_wind_components(ws, wd):\n    uu = [-spd*1.943844*math.sin(math.radians(agl)) for spd, agl in zip(ws, wd)]\n    vv = [-spd*1.943844*math.cos(math.radians(agl)) for spd, agl in zip(ws, wd)]\n    return uu, vv\n\ndef main():\n    # Parameters\n    daytime = 7  # Number of days\n    level_wind = 30  # Number of wind levels\n    HH = 3000  # Maximum height\n    level = 600  # Data level\n    DD = 14  # Start date\n\n    # Read data\n    df = pd.read_csv('./data/202112_upair.txt', sep='\\s+', header=11)\n    df = df[1:]\n    df['yyyymmddhh'] = df['yyyymmddhh'].astype('int').astype('str')\n\n    # Initialize lists\n    p = []\n    t = []\n    h = []\n    ws = []\n    wd = []\n    U = []\n    V = []\n\n    U_int = []\n    V_int = []\n    T_int = []\n\n    # Grid for interpolation\n    x = np.arange(DD, DD+daytime)  # Dates\n    y5 = np.linspace(0, HH, level+1)  # Heights\n    y100 = np.linspace(0, HH, level_wind+1)  # Heights (every 100m)\n\n    for i in range(daytime):\n        # Set conditions\n        FT = (df['stno'] == '466920') &amp; (df['yyyymmddhh'] == '202112' + str(DD+i)+'00') &amp; (df['Heigh'] &lt; HH) &amp; (df['Ws'] &lt; 990)\n\n        PT = df.loc[FT, 'Press']\n        TT = df.loc[FT, 'Tx']\n        HT = df.loc[FT, 'Heigh']\n        WST = df.loc[FT, 'Ws']\n        WDT = df.loc[FT, 'Wd']\n\n        p.append(PT)\n        t.append(TT)\n        h.append(HT)\n        ws.append(WST)\n        wd.append(WDT)\n\n        uu, vv = calculate_wind_components(WST, WDT)\n        U.append(uu)\n        V.append(vv)\n\n        # Interpolation\n        UU_int = np.interp(y5, HT, uu)\n        VV_int = np.interp(y5, HT, vv)\n        TT_int = np.interp(y5, HT, TT)\n        U_int.append(UU_int)\n        V_int.append(VV_int)\n        T_int.append(TT_int)\n\n    # Concatenate data\n    t_con = np.column_stack(T_int)\n    u_con = np.column_stack(U_int)\n    v_con = np.column_stack(V_int)\n\n    # Extract wind data for plotting\n    Vf = v_con[::20]\n    Uf = u_con[::20]\n\n    # Plotting\n    plt.contourf(x, y5, t_con, cmap='nipy_spectral', levels=500)\n    plt.barbs(x, y100, Uf, Vf)\n    plt.title(\"20211214~20211220\")\n    plt.xlabel('time (day)')\n    plt.ylabel('Height (m)')\n    plt.colorbar()\n    plt.show()\n\nif __name__ == '__main__':\n    main()\n</pre> import numpy as np import pandas as pd import matplotlib.pyplot as plt import math  def calculate_wind_components(ws, wd):     uu = [-spd*1.943844*math.sin(math.radians(agl)) for spd, agl in zip(ws, wd)]     vv = [-spd*1.943844*math.cos(math.radians(agl)) for spd, agl in zip(ws, wd)]     return uu, vv  def main():     # Parameters     daytime = 7  # Number of days     level_wind = 30  # Number of wind levels     HH = 3000  # Maximum height     level = 600  # Data level     DD = 14  # Start date      # Read data     df = pd.read_csv('./data/202112_upair.txt', sep='\\s+', header=11)     df = df[1:]     df['yyyymmddhh'] = df['yyyymmddhh'].astype('int').astype('str')      # Initialize lists     p = []     t = []     h = []     ws = []     wd = []     U = []     V = []      U_int = []     V_int = []     T_int = []      # Grid for interpolation     x = np.arange(DD, DD+daytime)  # Dates     y5 = np.linspace(0, HH, level+1)  # Heights     y100 = np.linspace(0, HH, level_wind+1)  # Heights (every 100m)      for i in range(daytime):         # Set conditions         FT = (df['stno'] == '466920') &amp; (df['yyyymmddhh'] == '202112' + str(DD+i)+'00') &amp; (df['Heigh'] &lt; HH) &amp; (df['Ws'] &lt; 990)          PT = df.loc[FT, 'Press']         TT = df.loc[FT, 'Tx']         HT = df.loc[FT, 'Heigh']         WST = df.loc[FT, 'Ws']         WDT = df.loc[FT, 'Wd']          p.append(PT)         t.append(TT)         h.append(HT)         ws.append(WST)         wd.append(WDT)          uu, vv = calculate_wind_components(WST, WDT)         U.append(uu)         V.append(vv)          # Interpolation         UU_int = np.interp(y5, HT, uu)         VV_int = np.interp(y5, HT, vv)         TT_int = np.interp(y5, HT, TT)         U_int.append(UU_int)         V_int.append(VV_int)         T_int.append(TT_int)      # Concatenate data     t_con = np.column_stack(T_int)     u_con = np.column_stack(U_int)     v_con = np.column_stack(V_int)      # Extract wind data for plotting     Vf = v_con[::20]     Uf = u_con[::20]      # Plotting     plt.contourf(x, y5, t_con, cmap='nipy_spectral', levels=500)     plt.barbs(x, y100, Uf, Vf)     plt.title(\"20211214~20211220\")     plt.xlabel('time (day)')     plt.ylabel('Height (m)')     plt.colorbar()     plt.show()  if __name__ == '__main__':     main()  <ul> <li>\u63a2\u7a7a\u5716\u7e6a\u88fd\u53c3\u8003</li> <li>CIN\u3001CAPE</li> <li>K-index</li> </ul> <p>By TA</p> In\u00a0[3]: Copied! <pre>import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport metpy.calc as mpcalc\nfrom metpy.plots import add_metpy_logo, SkewT\nfrom metpy.units import units\nfrom metpy.calc import lcl , lfc\n\ndf=pd.read_csv('./data/202101_upair.txt',sep='\\s+',header=11)\ndf=df[1:]\n\ndf['yyyymmddhh']=df['yyyymmddhh'].astype('int').astype('str')\n\nfilt=(df['stno']=='466920')&amp;(df['yyyymmddhh']=='2021013000')  \n\np=df.loc[filt,'Press'].values * units.hPa\nT=df.loc[filt,'Tx'].values * units.degC\nTd=df.loc[filt,'Td'].values * units.degC\nrh=df.loc[filt,'RH'].values\n\nwind_speed = df.loc[filt,'Ws'].values * units.knots *1.94384449                         #note:unit\nwind_dir = df.loc[filt,'Wd'].values * units.degrees\nu, v = mpcalc.wind_components(wind_speed, wind_dir)\n\nfig = plt.figure(figsize=(9,11))\n\n#add_metpy_logo(fig, 120, 50)\nskew = SkewT(fig, rotation=45)\n\n# Plot the data using normal plotting functions, in this case using\n# log scaling in Y, as dictated by the typical meteorological plot.\n\nskew.plot(p, T, 'r', lw=2, label='Temperature')\nskew.plot(p, Td, 'b', lw=2, label='Dewpoint Temperature')\nskew.plot_barbs(p[::3], u[::3], v[::3], y_clip_radius=0.03)  #[::3] \u6bcf3\u9ede\u53d6\u8cc7\u6599\nskew.ax.set_ylim(1020, 100)\nskew.ax.set_xlim(-30, 40)\n\n\n# Calculate LCL height and plot as black dot. Because `p`'s first value is\n# ~1000 mb and its last value is ~250 mb, the `0` index is selected for\n# `p`, `T`, and `Td` to lift the parcel from the surface. If `p` was inverted,\n# i.e. start from low value, 250 mb, to a high value, 1000 mb, the `-1` index\n# should be selected.\nlcl_pressure, lcl_temperature = mpcalc.lcl(p[0], T[0], Td[0])          #LCL     \nskew.plot(lcl_pressure, lcl_temperature, 'ko', markerfacecolor='black')\n\n# Calculate full parcel profile and add to plot as black line\nprof = mpcalc.parcel_profile(p, T[0], Td[0]).to('degC')\nskew.plot(p, prof, 'k', linewidth=2)\n\n# Shade areas of CAPE and CIN\nskew.shade_cin(p, T, prof, Td)\nskew.shade_cape(p, T, prof)\n\n#\u8a08\u7b97CAPE CIN K-index\nCAPE,CIN= mpcalc.cape_cin(p, T, Td, prof)                                           #\u8a08\u7b97CAPE &amp; CIN &amp; K-index\nK=mpcalc.k_index(p, T, Td)\nprint(\"CAPE\",CAPE)\nprint(\"CIN\",CIN)\nprint(\"K-index\",K)\n\n#\u8a08\u7b97LFC\u3001CCL\nccl_p, ccl_t, t_c = mpcalc.ccl(p, T, Td)                                #CCL\nlfc_p, lfc_t = lfc(p, T, Td)\n\n\n# An example of a slanted line at constant T -- in this case the 0\n# isotherm\nskew.ax.axvline(0, color='c', linestyle='--', linewidth=2)\n\n# Add the relevant special lines\n#skew.plot_dry_adiabats()\n#skew.plot_moist_adiabats()\nskew.plot_dry_adiabats(t0=np.arange(233, 533, 10)*units.K, alpha=0.5, color='orange')\nskew.plot_moist_adiabats(t0=np.arange(233, 400, 5)*units.K, alpha=0.5, color='g')\nskew.plot_mixing_lines()\n\n# Show the plot\n\nCAPE='CAPE=' + str(round(CAPE,2))\nCIN = 'CIN=' + str(round(CIN,2))\nK = 'K-index=' + str(round(K,1))\nCCL = 'C.C.L=' + str(round(ccl_p,2))\nLCL = 'L.C.L=' + str(round(lcl_pressure,2))\nLFC = 'L.F.C=' + str(round(lfc_p,2))\n\n\nplt.text(-72,82,CAPE,fontsize=12)\nplt.text(-70,87,CIN,fontsize=12)    \nplt.text(-68,92,K,fontsize=12)\nplt.text(-100,82,LCL,fontsize=12)\nplt.text(-98,87,LFC,fontsize=12)\nplt.text(-96,92,CCL,fontsize=12)\n\nplt.xlabel(\"Temperature ($^o$)\", fontsize=15)  #$^o$ \u4e0a\u6a19\u7b26\u865f'\u5ea6'\nplt.ylabel(\"Pressure (hPa)\", fontsize=15)\nplt.legend(loc='upper right', fontsize=15)\n\nplt.show()\n</pre> import numpy as np import pandas as pd import matplotlib.pyplot as plt  import metpy.calc as mpcalc from metpy.plots import add_metpy_logo, SkewT from metpy.units import units from metpy.calc import lcl , lfc  df=pd.read_csv('./data/202101_upair.txt',sep='\\s+',header=11) df=df[1:]  df['yyyymmddhh']=df['yyyymmddhh'].astype('int').astype('str')  filt=(df['stno']=='466920')&amp;(df['yyyymmddhh']=='2021013000')    p=df.loc[filt,'Press'].values * units.hPa T=df.loc[filt,'Tx'].values * units.degC Td=df.loc[filt,'Td'].values * units.degC rh=df.loc[filt,'RH'].values  wind_speed = df.loc[filt,'Ws'].values * units.knots *1.94384449                         #note:unit wind_dir = df.loc[filt,'Wd'].values * units.degrees u, v = mpcalc.wind_components(wind_speed, wind_dir)  fig = plt.figure(figsize=(9,11))  #add_metpy_logo(fig, 120, 50) skew = SkewT(fig, rotation=45)  # Plot the data using normal plotting functions, in this case using # log scaling in Y, as dictated by the typical meteorological plot.  skew.plot(p, T, 'r', lw=2, label='Temperature') skew.plot(p, Td, 'b', lw=2, label='Dewpoint Temperature') skew.plot_barbs(p[::3], u[::3], v[::3], y_clip_radius=0.03)  #[::3] \u6bcf3\u9ede\u53d6\u8cc7\u6599 skew.ax.set_ylim(1020, 100) skew.ax.set_xlim(-30, 40)   # Calculate LCL height and plot as black dot. Because `p`'s first value is # ~1000 mb and its last value is ~250 mb, the `0` index is selected for # `p`, `T`, and `Td` to lift the parcel from the surface. If `p` was inverted, # i.e. start from low value, 250 mb, to a high value, 1000 mb, the `-1` index # should be selected. lcl_pressure, lcl_temperature = mpcalc.lcl(p[0], T[0], Td[0])          #LCL      skew.plot(lcl_pressure, lcl_temperature, 'ko', markerfacecolor='black')  # Calculate full parcel profile and add to plot as black line prof = mpcalc.parcel_profile(p, T[0], Td[0]).to('degC') skew.plot(p, prof, 'k', linewidth=2)  # Shade areas of CAPE and CIN skew.shade_cin(p, T, prof, Td) skew.shade_cape(p, T, prof)  #\u8a08\u7b97CAPE CIN K-index CAPE,CIN= mpcalc.cape_cin(p, T, Td, prof)                                           #\u8a08\u7b97CAPE &amp; CIN &amp; K-index K=mpcalc.k_index(p, T, Td) print(\"CAPE\",CAPE) print(\"CIN\",CIN) print(\"K-index\",K)  #\u8a08\u7b97LFC\u3001CCL ccl_p, ccl_t, t_c = mpcalc.ccl(p, T, Td)                                #CCL lfc_p, lfc_t = lfc(p, T, Td)   # An example of a slanted line at constant T -- in this case the 0 # isotherm skew.ax.axvline(0, color='c', linestyle='--', linewidth=2)  # Add the relevant special lines #skew.plot_dry_adiabats() #skew.plot_moist_adiabats() skew.plot_dry_adiabats(t0=np.arange(233, 533, 10)*units.K, alpha=0.5, color='orange') skew.plot_moist_adiabats(t0=np.arange(233, 400, 5)*units.K, alpha=0.5, color='g') skew.plot_mixing_lines()  # Show the plot  CAPE='CAPE=' + str(round(CAPE,2)) CIN = 'CIN=' + str(round(CIN,2)) K = 'K-index=' + str(round(K,1)) CCL = 'C.C.L=' + str(round(ccl_p,2)) LCL = 'L.C.L=' + str(round(lcl_pressure,2)) LFC = 'L.F.C=' + str(round(lfc_p,2))   plt.text(-72,82,CAPE,fontsize=12) plt.text(-70,87,CIN,fontsize=12)     plt.text(-68,92,K,fontsize=12) plt.text(-100,82,LCL,fontsize=12) plt.text(-98,87,LFC,fontsize=12) plt.text(-96,92,CCL,fontsize=12)  plt.xlabel(\"Temperature ($^o$)\", fontsize=15)  #$^o$ \u4e0a\u6a19\u7b26\u865f'\u5ea6' plt.ylabel(\"Pressure (hPa)\", fontsize=15) plt.legend(loc='upper right', fontsize=15)  plt.show() <pre>/tmp/ipykernel_1946/1249020452.py:50: UserWarning: Duplicate pressure(s) [47.7] hPa provided. Output profile includes duplicate temperatures as a result.\n  prof = mpcalc.parcel_profile(p, T[0], Td[0]).to('degC')\n/tmp/ipykernel_1946/1249020452.py:66: UserWarning: Duplicate pressure(s) [47.7] hPa provided. Output profile includes duplicate temperatures as a result.\n  lfc_p, lfc_t = lfc(p, T, Td)\n</pre> <pre>CAPE 0 joule / kilogram\nCIN 0 joule / kilogram\nK-index 5.6 degree_Celsius\n</pre> <p>By @1chooo</p> In\u00a0[4]: Copied! <pre>import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport metpy.calc as mpcalc\nfrom metpy.plots import SkewT\nfrom metpy.units import units\n\ndef plot_skewt(df, stno, yyyymmddhh):\n    df['yyyymmddhh'] = df['yyyymmddhh'].astype('int').astype('str')\n    filt = (df['stno'] == stno) &amp; (df['yyyymmddhh'] == yyyymmddhh)\n    \n    p = df.loc[filt, 'Press'].values * units.hPa\n    T = df.loc[filt, 'Tx'].values * units.degC\n    Td = df.loc[filt, 'Td'].values * units.degC\n    wind_speed = df.loc[filt, 'Ws'].values * units.knots * 1.94384449\n    wind_dir = df.loc[filt, 'Wd'].values * units.degrees\n    \n    u, v = mpcalc.wind_components(wind_speed, wind_dir)\n    \n    fig = plt.figure(figsize=(9, 11))\n    skew = SkewT(fig, rotation=45)\n    \n    skew.plot(p, T, 'r', lw=2, label='Temperature')\n    skew.plot(p, Td, 'b', lw=2, label='Dewpoint Temperature')\n    skew.plot_barbs(p[::3], u[::3], v[::3], y_clip_radius=0.03)\n    skew.ax.set_ylim(1020, 100)\n    skew.ax.set_xlim(-30, 40)\n    \n    lcl_pressure, lcl_temperature = mpcalc.lcl(p[0], T[0], Td[0])\n    skew.plot(lcl_pressure, lcl_temperature, 'ko', markerfacecolor='black')\n    \n    prof = mpcalc.parcel_profile(p, T[0], Td[0]).to('degC')\n    skew.plot(p, prof, 'k', linewidth=2)\n    \n    skew.shade_cin(p, T, prof, Td)\n    skew.shade_cape(p, T, prof)\n    \n    ccl_p, ccl_t, t_c = mpcalc.ccl(p, T, Td)\n    lfc_p, lfc_t = mpcalc.lfc(p, T, Td)\n    \n    skew.ax.axvline(0, color='c', linestyle='--', linewidth=2)\n    \n    skew.plot_dry_adiabats(t0=np.arange(233, 533, 10) * units.K, alpha=0.5, color='orange')\n    skew.plot_moist_adiabats(t0=np.arange(233, 400, 5) * units.K, alpha=0.5, color='g')\n    skew.plot_mixing_lines()\n    \n    plt.xlabel(\"Temperature ($^\\circ$C)\", fontsize=15)\n    plt.ylabel(\"Pressure (hPa)\", fontsize=15)\n    plt.legend(loc='upper right', fontsize=15)\n    \n    plt.show()\n\ndef main():\n    df = pd.read_csv('./data/202101_upair.txt', sep='\\s+', header=11)\n    df = df[1:]\n    \n    plot_skewt(df, '466920', '2021013000')\n\nif __name__ == \"__main__\":\n    main()\n</pre> import numpy as np import pandas as pd import matplotlib.pyplot as plt import metpy.calc as mpcalc from metpy.plots import SkewT from metpy.units import units  def plot_skewt(df, stno, yyyymmddhh):     df['yyyymmddhh'] = df['yyyymmddhh'].astype('int').astype('str')     filt = (df['stno'] == stno) &amp; (df['yyyymmddhh'] == yyyymmddhh)          p = df.loc[filt, 'Press'].values * units.hPa     T = df.loc[filt, 'Tx'].values * units.degC     Td = df.loc[filt, 'Td'].values * units.degC     wind_speed = df.loc[filt, 'Ws'].values * units.knots * 1.94384449     wind_dir = df.loc[filt, 'Wd'].values * units.degrees          u, v = mpcalc.wind_components(wind_speed, wind_dir)          fig = plt.figure(figsize=(9, 11))     skew = SkewT(fig, rotation=45)          skew.plot(p, T, 'r', lw=2, label='Temperature')     skew.plot(p, Td, 'b', lw=2, label='Dewpoint Temperature')     skew.plot_barbs(p[::3], u[::3], v[::3], y_clip_radius=0.03)     skew.ax.set_ylim(1020, 100)     skew.ax.set_xlim(-30, 40)          lcl_pressure, lcl_temperature = mpcalc.lcl(p[0], T[0], Td[0])     skew.plot(lcl_pressure, lcl_temperature, 'ko', markerfacecolor='black')          prof = mpcalc.parcel_profile(p, T[0], Td[0]).to('degC')     skew.plot(p, prof, 'k', linewidth=2)          skew.shade_cin(p, T, prof, Td)     skew.shade_cape(p, T, prof)          ccl_p, ccl_t, t_c = mpcalc.ccl(p, T, Td)     lfc_p, lfc_t = mpcalc.lfc(p, T, Td)          skew.ax.axvline(0, color='c', linestyle='--', linewidth=2)          skew.plot_dry_adiabats(t0=np.arange(233, 533, 10) * units.K, alpha=0.5, color='orange')     skew.plot_moist_adiabats(t0=np.arange(233, 400, 5) * units.K, alpha=0.5, color='g')     skew.plot_mixing_lines()          plt.xlabel(\"Temperature ($^\\circ$C)\", fontsize=15)     plt.ylabel(\"Pressure (hPa)\", fontsize=15)     plt.legend(loc='upper right', fontsize=15)          plt.show()  def main():     df = pd.read_csv('./data/202101_upair.txt', sep='\\s+', header=11)     df = df[1:]          plot_skewt(df, '466920', '2021013000')  if __name__ == \"__main__\":     main()  <pre>/tmp/ipykernel_1946/964422136.py:32: UserWarning: Duplicate pressure(s) [47.7] hPa provided. Output profile includes duplicate temperatures as a result.\n  prof = mpcalc.parcel_profile(p, T[0], Td[0]).to('degC')\n/tmp/ipykernel_1946/964422136.py:39: UserWarning: Duplicate pressure(s) [47.7] hPa provided. Output profile includes duplicate temperatures as a result.\n  lfc_p, lfc_t = mpcalc.lfc(p, T, Td)\n</pre> <p>By TA</p> In\u00a0[5]: Copied! <pre>import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n#==========\u8b80\u8cc7\u6599==========\ndf=pd.read_csv('./data/202101_upair.txt',sep='\\s+',header=11)   #\u8b80\u8cc7\u6599,\ndf=df[1:]\ndf['yyyymmddhh']=df['yyyymmddhh'].astype('int').astype('str')   #\u63db\u70ba\u6574\u6578\u518d\u63db\u70ba\u5b57\u4e32\n#print(df['yyyymmddhh'])\n\n#\u8a2d\u5b9a\u689d\u4ef6\uff0c\u53ea\u8b80\u53d6\u55ae\u4e00\u6e2c\u7ad9\u55ae\u4e00\u6642\u9593\u7684\u8cc7\u6599\u3002\nfilt=(df['stno']=='466920')&amp;(df['yyyymmddhh']=='2021010100')\n#\u53d6\u51fa\u5217\u540d\u76f8\u5c0d\u61c9\u7684\u8cc7\u6599\u3002\np1=df.loc[filt,'Press']\nt1=df.loc[filt,'Tx']    \nh1=df.loc[filt,'Heigh']\n\nfilt=(df['stno']=='466920')&amp;(df['yyyymmddhh']=='2021010200')  \np2=df.loc[filt,'Press']\nt2=df.loc[filt,'Tx']\nh2=df.loc[filt,'Heigh']\n\n\n#==========\u7e6a\u5716==========\nplt.figure(figsize=(6,8))       #\u7e6a\u5716\u5340\u57df\u9577\u5bec\u6bd4\u3001\u89e3\u6790\u5ea6\nplt.plot(t1,p1,'r.-',label=\"2021010100\")\t#\u7e6a\u88fd\u51fd\u6578\u5716\nplt.plot(t2,p2,'b-',label=\"2021010200\")\n\n\nplt.gca().invert_yaxis()                #\u5c07y\u8ef8\u53cd\u8f49\uff0c\u58d3\u529b\u5f9e(0~1000)\u8b8a\u6210(1000~0)\nplt.xlabel('$Temperature\\ (^\\circ C)$',fontsize=15)\t#X\u8ef8\u540d\u7a31\nplt.ylabel('$Pressure\\ (hPa)$',fontsize=15)\t\t#Y\u8ef8\u540d\u7a31\nplt.title(\"Title\",fontsize=25)\t\t\nplt.legend(loc='upper right', fontsize=15)\n#plt.grid()   \t\t\t\t#\u8a2d\u7f6e\u7db2\u683c\u7dda\nplt.show()\n</pre> import numpy as np import pandas as pd import matplotlib.pyplot as plt  #==========\u8b80\u8cc7\u6599========== df=pd.read_csv('./data/202101_upair.txt',sep='\\s+',header=11)   #\u8b80\u8cc7\u6599, df=df[1:] df['yyyymmddhh']=df['yyyymmddhh'].astype('int').astype('str')   #\u63db\u70ba\u6574\u6578\u518d\u63db\u70ba\u5b57\u4e32 #print(df['yyyymmddhh'])  #\u8a2d\u5b9a\u689d\u4ef6\uff0c\u53ea\u8b80\u53d6\u55ae\u4e00\u6e2c\u7ad9\u55ae\u4e00\u6642\u9593\u7684\u8cc7\u6599\u3002 filt=(df['stno']=='466920')&amp;(df['yyyymmddhh']=='2021010100') #\u53d6\u51fa\u5217\u540d\u76f8\u5c0d\u61c9\u7684\u8cc7\u6599\u3002 p1=df.loc[filt,'Press'] t1=df.loc[filt,'Tx']     h1=df.loc[filt,'Heigh']  filt=(df['stno']=='466920')&amp;(df['yyyymmddhh']=='2021010200')   p2=df.loc[filt,'Press'] t2=df.loc[filt,'Tx'] h2=df.loc[filt,'Heigh']   #==========\u7e6a\u5716========== plt.figure(figsize=(6,8))       #\u7e6a\u5716\u5340\u57df\u9577\u5bec\u6bd4\u3001\u89e3\u6790\u5ea6 plt.plot(t1,p1,'r.-',label=\"2021010100\")\t#\u7e6a\u88fd\u51fd\u6578\u5716 plt.plot(t2,p2,'b-',label=\"2021010200\")   plt.gca().invert_yaxis()                #\u5c07y\u8ef8\u53cd\u8f49\uff0c\u58d3\u529b\u5f9e(0~1000)\u8b8a\u6210(1000~0) plt.xlabel('$Temperature\\ (^\\circ C)$',fontsize=15)\t#X\u8ef8\u540d\u7a31 plt.ylabel('$Pressure\\ (hPa)$',fontsize=15)\t\t#Y\u8ef8\u540d\u7a31 plt.title(\"Title\",fontsize=25)\t\t plt.legend(loc='upper right', fontsize=15) #plt.grid()   \t\t\t\t#\u8a2d\u7f6e\u7db2\u683c\u7dda plt.show()  <p>By @1chooo</p> In\u00a0[6]: Copied! <pre>import pandas as pd\nimport matplotlib.pyplot as plt\n\ndef plot_data(df, stno, yyyymmddhh_list, label_list):\n    data = []  # \u5132\u5b58\u8cc7\u6599\u5e8f\u5217\u7684\u5217\u8868\n    for yyyymmddhh, label in zip(yyyymmddhh_list, label_list):\n        filt = (df['stno'] == stno) &amp; (df['yyyymmddhh'] == yyyymmddhh)\n        p = df.loc[filt, 'Press']\n        t = df.loc[filt, 'Tx']\n        data.append((t, p, label))  # \u5c07\u8cc7\u6599\u5e8f\u5217\u52a0\u5165\u5217\u8868\n    \n    # \u7e6a\u5716\u8a2d\u5b9a\n    plt.figure(figsize=(6, 8))\n    plt.gca().invert_yaxis()\n    plt.xlabel('$Temperature\\ (^\\circ C)$', fontsize=15)\n    plt.ylabel('$Pressure\\ (hPa)$', fontsize=15)\n    plt.title(\"Title\", fontsize=25)\n    \n    # \u7e6a\u88fd\u8cc7\u6599\u5e8f\u5217\n    for i, (t, p, label) in enumerate(data):\n        if i == 0:\n            plt.plot(t, p, 'r.-', label=label)\n        else:\n            plt.plot(t, p, 'b-', label=label)\n    \n    plt.legend(loc='upper right', fontsize=15)\n    \n    # \u986f\u793a\u5716\u5f62\n    plt.show()\n\ndef main():\n    # \u8b80\u53d6\u8cc7\u6599\n    df = pd.read_csv('./data/202101_upair.txt', sep='\\s+', header=11)\n    df = df[1:]\n    df['yyyymmddhh'] = df['yyyymmddhh'].astype(int).astype(str)\n    \n    # \u8a2d\u5b9a\u8981\u7e6a\u88fd\u7684\u8cc7\u6599\n    yyyymmddhh_list = ['2021010100', '2021010200']\n    label_list = ['2021010100', '2021010200']\n    plot_data(df, '466920', yyyymmddhh_list, label_list)\n\nif __name__ == \"__main__\":\n    main()\n</pre> import pandas as pd import matplotlib.pyplot as plt  def plot_data(df, stno, yyyymmddhh_list, label_list):     data = []  # \u5132\u5b58\u8cc7\u6599\u5e8f\u5217\u7684\u5217\u8868     for yyyymmddhh, label in zip(yyyymmddhh_list, label_list):         filt = (df['stno'] == stno) &amp; (df['yyyymmddhh'] == yyyymmddhh)         p = df.loc[filt, 'Press']         t = df.loc[filt, 'Tx']         data.append((t, p, label))  # \u5c07\u8cc7\u6599\u5e8f\u5217\u52a0\u5165\u5217\u8868          # \u7e6a\u5716\u8a2d\u5b9a     plt.figure(figsize=(6, 8))     plt.gca().invert_yaxis()     plt.xlabel('$Temperature\\ (^\\circ C)$', fontsize=15)     plt.ylabel('$Pressure\\ (hPa)$', fontsize=15)     plt.title(\"Title\", fontsize=25)          # \u7e6a\u88fd\u8cc7\u6599\u5e8f\u5217     for i, (t, p, label) in enumerate(data):         if i == 0:             plt.plot(t, p, 'r.-', label=label)         else:             plt.plot(t, p, 'b-', label=label)          plt.legend(loc='upper right', fontsize=15)          # \u986f\u793a\u5716\u5f62     plt.show()  def main():     # \u8b80\u53d6\u8cc7\u6599     df = pd.read_csv('./data/202101_upair.txt', sep='\\s+', header=11)     df = df[1:]     df['yyyymmddhh'] = df['yyyymmddhh'].astype(int).astype(str)          # \u8a2d\u5b9a\u8981\u7e6a\u88fd\u7684\u8cc7\u6599     yyyymmddhh_list = ['2021010100', '2021010200']     label_list = ['2021010100', '2021010200']     plot_data(df, '466920', yyyymmddhh_list, label_list)  if __name__ == \"__main__\":     main()  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"showcase/thermodynamic_diagram/#thermodynamic-diagram","title":"Thermodynamic Diagram\u00b6","text":""},{"location":"showcase/tower/","title":"Tower Data Analysis","text":"<p>Import the package.</p> In\u00a0[1]: Copied! <pre>import csv\nimport math\nimport matplotlib.pyplot as plt\n</pre> import csv import math import matplotlib.pyplot as plt <p>Announce the variable and define the parameter.</p> In\u00a0[2]: Copied! <pre>eS1, ePrime1, Td1, q1, r1, temp1, rh1, p1 = 0, 0, 0, 0, 0, 0, 0, 0\neS2, ePrime2, Td2, q2, r2, temp2, rh2, p2 = 0, 0, 0, 0, 0, 0, 0, 0\nRd = 287.0  # J/(kg*K)\nRv = 461.5  # J/(kg*K)\nlist_time = []                                                              # x\nlist_eS1, list_ePrime1, list_Td1, list_q1, list_r1 = [], [], [], [], []     # y1\nlist_eS2, list_ePrime2, list_Td2, list_q2, list_r2 = [], [], [], [], []     # y2\n</pre> eS1, ePrime1, Td1, q1, r1, temp1, rh1, p1 = 0, 0, 0, 0, 0, 0, 0, 0 eS2, ePrime2, Td2, q2, r2, temp2, rh2, p2 = 0, 0, 0, 0, 0, 0, 0, 0 Rd = 287.0  # J/(kg*K) Rv = 461.5  # J/(kg*K) list_time = []                                                              # x list_eS1, list_ePrime1, list_Td1, list_q1, list_r1 = [], [], [], [], []     # y1 list_eS2, list_ePrime2, list_Td2, list_q2, list_r2 = [], [], [], [], []     # y2 <p>Open file and pre-processing the data.</p> In\u00a0[3]: Copied! <pre>inputFile1 = open(\"./data/10M_tower_data1.csv\", 'r')\ninputFile2 = open(\"./data/10M_tower_data2.csv\", 'r')\ndataReader1 = csv.reader(inputFile1)\ndataReader2 = csv.reader(inputFile2)\n\n# The first towel.\nfor line1 in dataReader1:\n    count = 0\n\n    if line1[1] == '9' and line1[2] == '8':\n        list_time.append(float(line1[3]) + (float(line1[4]) / 60.0))\n        temp1 = round(float(line1[5]), 1)\n        rh1 = round(float(line1[6]), 1)\n        p1 = round(float(line1[9]), 1)\n\n        if temp1 == -999 or rh1 == -999 or p1 == -999:\n            count += 1\n\n        if count == 0:\n            eS1 = round((6.112 * math.exp((17.67 * temp1) / (temp1 + 243.5))), 2)\n            list_eS1.append(eS1)\n\n            ePrime1 = round(((rh1/100.0) * eS1), 2)\n            list_ePrime1.append(ePrime1)\n\n            Td1 = round(((243.5 * math.log(ePrime1/6.11))/(17.76 - math.log(ePrime1/6.11))), 2)\n            list_Td1.append(Td1)\n\n            q1 = round((1000 * (((ePrime1) / (Rv * (temp1 + 273.15))) /\n                        (((p1 - ePrime1) / (Rd * (temp1 + 273.15))) + \n                         ((ePrime1) / (Rv * (temp1 + 273.15)))))), 2)\n            list_q1.append(q1)\n\n            r1 = round((1000 * (((ePrime1) / (Rv * (temp1 + 273.15))) / \n                       ((p1 - ePrime1) / (Rd * (temp1 + 273.15))))), 2)\n            list_r1.append(r1)\n\ninputFile1.close()\n\n\n# The second toewl.\nfor line2 in dataReader2:\n    count = 0\n\n    if line2[1] == '9' and line2[2] == '8':\n        temp2 = round(float(line2[5]), 1)\n        rh2 = round(float(line2[6]), 1)\n        p2 = round(float(line2[9]), 1)\n\n        if temp2 == -999 or rh2 == -999 or p2 == -999:\n            count += 1\n\n        if count == 0:\n            eS2 = round((6.112 * math.exp((17.67 * temp2) / (temp2 + 243.5))), 2)\n            list_eS2.append(eS2)\n\n            ePrime2 = round(((rh2 / 100.0) * eS2), 2)\n            list_ePrime2.append(ePrime2)\n\n            Td2 = round(((243.5 * math.log(ePrime2 / 6.11)) / (17.76 - math.log(ePrime2 / 6.11))), 2)\n            list_Td2.append(Td2)\n\n            q2 = round((1000 * (((ePrime2) / (Rv * (temp2 + 273.15))) /\n                        (((p2 - ePrime2) / (Rd * (temp2 + 273.15))) + ((ePrime2) / (Rv * (temp2 + 273.15)))))), 2)\n            list_q2.append(q2)\n\n            r2 = round((1000 * (((ePrime2) / (Rv * (temp2 + 273.15))) / ((p2 - ePrime2) / (Rd * (temp2 + 273.15))))), 2)\n            list_r2.append(r2)\n\ninputFile2.close()\n</pre> inputFile1 = open(\"./data/10M_tower_data1.csv\", 'r') inputFile2 = open(\"./data/10M_tower_data2.csv\", 'r') dataReader1 = csv.reader(inputFile1) dataReader2 = csv.reader(inputFile2)  # The first towel. for line1 in dataReader1:     count = 0      if line1[1] == '9' and line1[2] == '8':         list_time.append(float(line1[3]) + (float(line1[4]) / 60.0))         temp1 = round(float(line1[5]), 1)         rh1 = round(float(line1[6]), 1)         p1 = round(float(line1[9]), 1)          if temp1 == -999 or rh1 == -999 or p1 == -999:             count += 1          if count == 0:             eS1 = round((6.112 * math.exp((17.67 * temp1) / (temp1 + 243.5))), 2)             list_eS1.append(eS1)              ePrime1 = round(((rh1/100.0) * eS1), 2)             list_ePrime1.append(ePrime1)              Td1 = round(((243.5 * math.log(ePrime1/6.11))/(17.76 - math.log(ePrime1/6.11))), 2)             list_Td1.append(Td1)              q1 = round((1000 * (((ePrime1) / (Rv * (temp1 + 273.15))) /                         (((p1 - ePrime1) / (Rd * (temp1 + 273.15))) +                           ((ePrime1) / (Rv * (temp1 + 273.15)))))), 2)             list_q1.append(q1)              r1 = round((1000 * (((ePrime1) / (Rv * (temp1 + 273.15))) /                         ((p1 - ePrime1) / (Rd * (temp1 + 273.15))))), 2)             list_r1.append(r1)  inputFile1.close()   # The second toewl. for line2 in dataReader2:     count = 0      if line2[1] == '9' and line2[2] == '8':         temp2 = round(float(line2[5]), 1)         rh2 = round(float(line2[6]), 1)         p2 = round(float(line2[9]), 1)          if temp2 == -999 or rh2 == -999 or p2 == -999:             count += 1          if count == 0:             eS2 = round((6.112 * math.exp((17.67 * temp2) / (temp2 + 243.5))), 2)             list_eS2.append(eS2)              ePrime2 = round(((rh2 / 100.0) * eS2), 2)             list_ePrime2.append(ePrime2)              Td2 = round(((243.5 * math.log(ePrime2 / 6.11)) / (17.76 - math.log(ePrime2 / 6.11))), 2)             list_Td2.append(Td2)              q2 = round((1000 * (((ePrime2) / (Rv * (temp2 + 273.15))) /                         (((p2 - ePrime2) / (Rd * (temp2 + 273.15))) + ((ePrime2) / (Rv * (temp2 + 273.15)))))), 2)             list_q2.append(q2)              r2 = round((1000 * (((ePrime2) / (Rv * (temp2 + 273.15))) / ((p2 - ePrime2) / (Rd * (temp2 + 273.15))))), 2)             list_r2.append(r2)  inputFile2.close() <p>Find the maximum and minimum value of each towel and show on the display.</p> In\u00a0[4]: Copied! <pre>print(f\"Saturated water vapor pressure: maximum: {max(list_eS1)}, {max(list_eS2)}; minimum: {min(list_eS1)}, {min(list_eS2)}\")\nprint(f\"Water vapor pressure:           maximum: {max(list_ePrime1)}, {max(list_ePrime2)}; minimum: {min(list_ePrime1)}, {min(list_ePrime2)}\")\nprint(f\"Dew point temperature:          maximum: {max(list_Td1)}, {max(list_Td2)}; minimum: {min(list_Td1)}, {min(list_Td2)}\")\nprint(f\"Specific humidity:              maximum: {max(list_q1)}, {max(list_q2)}; minimum: {min(list_q1)}, {min(list_q2)}\")\nprint(f\"Mixing ratio:                   maximum: {max(list_r1)}, {max(list_r2)}; minimum: {min(list_r1)}, {min(list_r2)}\")\n</pre> print(f\"Saturated water vapor pressure: maximum: {max(list_eS1)}, {max(list_eS2)}; minimum: {min(list_eS1)}, {min(list_eS2)}\") print(f\"Water vapor pressure:           maximum: {max(list_ePrime1)}, {max(list_ePrime2)}; minimum: {min(list_ePrime1)}, {min(list_ePrime2)}\") print(f\"Dew point temperature:          maximum: {max(list_Td1)}, {max(list_Td2)}; minimum: {min(list_Td1)}, {min(list_Td2)}\") print(f\"Specific humidity:              maximum: {max(list_q1)}, {max(list_q2)}; minimum: {min(list_q1)}, {min(list_q2)}\") print(f\"Mixing ratio:                   maximum: {max(list_r1)}, {max(list_r2)}; minimum: {min(list_r1)}, {min(list_r2)}\") <pre>Saturated water vapor pressure: maximum: 50.07, 50.36; minimum: 34.22, 34.62\nWater vapor pressure:           maximum: 33.27, 37.15; minimum: 23.32, 22.84\nDew point temperature:          maximum: 25.69, 27.55; minimum: 19.86, 19.53\nSpecific humidity:              maximum: 21.06, 23.53; minimum: 14.73, 14.42\nMixing ratio:                   maximum: 21.52, 24.09; minimum: 14.95, 14.63\n</pre> <p>Plot the each line charts.</p> In\u00a0[5]: Copied! <pre>plt.figure(\"2021 9/8 Saturated Water Vapor Pressure\")\nplt.plot(list_time, list_eS1, linewidth = 1.0)\nplt.plot(list_time, list_eS2, linewidth = 1.0)\nplt.xlabel(\"Time (hr)\")\nplt.ylabel(\"Saturated water vapor pressure (hPa)\")\nplt.legend([\"Tower1\", \"Tower2\"])\nplt.title(\"2021 9/8 Saturated Water Vapor Pressure\", fontweight = \"bold\")\nplt.xticks(range(0, 25, 1))\nplt.xlim(0, 24.0001)\nplt.grid()\n# plt.savefig('./image/Saturated_Water_Vapor_Pressure.png', dpi = 300)\n\nplt.show()\n</pre> plt.figure(\"2021 9/8 Saturated Water Vapor Pressure\") plt.plot(list_time, list_eS1, linewidth = 1.0) plt.plot(list_time, list_eS2, linewidth = 1.0) plt.xlabel(\"Time (hr)\") plt.ylabel(\"Saturated water vapor pressure (hPa)\") plt.legend([\"Tower1\", \"Tower2\"]) plt.title(\"2021 9/8 Saturated Water Vapor Pressure\", fontweight = \"bold\") plt.xticks(range(0, 25, 1)) plt.xlim(0, 24.0001) plt.grid() # plt.savefig('./image/Saturated_Water_Vapor_Pressure.png', dpi = 300)  plt.show() In\u00a0[6]: Copied! <pre>plt.figure(\"2021 9/8 Water Vapor Pressure\")\nplt.plot(list_time, list_ePrime1, linewidth = 1.0)\nplt.plot(list_time, list_ePrime2, linewidth = 1.0)\nplt.xlabel(\"Time (hr)\")\nplt.ylabel(\"Water vapor pressure (hPa)\")\nplt.legend([\"Tower1\", \"Tower2\"])\nplt.title(\"2021 9/8 Water Vapor Pressure\", fontweight = \"bold\")\nplt.xticks(range(0, 25, 1))\nplt.xlim(0, 24.0001)\nplt.grid()\n# plt.savefig('./image/Water_Vapor_Pressure.png', dpi = 300)\n\nplt.show()\n</pre> plt.figure(\"2021 9/8 Water Vapor Pressure\") plt.plot(list_time, list_ePrime1, linewidth = 1.0) plt.plot(list_time, list_ePrime2, linewidth = 1.0) plt.xlabel(\"Time (hr)\") plt.ylabel(\"Water vapor pressure (hPa)\") plt.legend([\"Tower1\", \"Tower2\"]) plt.title(\"2021 9/8 Water Vapor Pressure\", fontweight = \"bold\") plt.xticks(range(0, 25, 1)) plt.xlim(0, 24.0001) plt.grid() # plt.savefig('./image/Water_Vapor_Pressure.png', dpi = 300)  plt.show() In\u00a0[7]: Copied! <pre>plt.figure(\"2021 9/8 Dew Point Temperature\")\nplt.plot(list_time, list_Td1, linewidth = 1.0)\nplt.plot(list_time, list_Td2, linewidth = 1.0)\nplt.xlabel(\"Time (hr)\")\nplt.ylabel(\"Dew point temperature (\u00b0C)\")\nplt.legend([\"Tower1\", \"Tower2\"])\nplt.title(\"2021 9/8 Dew Point Temperature\", fontweight = \"bold\")\nplt.xticks(range(0, 25, 1))\nplt.xlim(0, 24.0001)\nplt.grid()\n# plt.savefig('./image/Dew_Point_Temperature.png', dpi = 300)\n\nplt.show()\n</pre> plt.figure(\"2021 9/8 Dew Point Temperature\") plt.plot(list_time, list_Td1, linewidth = 1.0) plt.plot(list_time, list_Td2, linewidth = 1.0) plt.xlabel(\"Time (hr)\") plt.ylabel(\"Dew point temperature (\u00b0C)\") plt.legend([\"Tower1\", \"Tower2\"]) plt.title(\"2021 9/8 Dew Point Temperature\", fontweight = \"bold\") plt.xticks(range(0, 25, 1)) plt.xlim(0, 24.0001) plt.grid() # plt.savefig('./image/Dew_Point_Temperature.png', dpi = 300)  plt.show() In\u00a0[8]: Copied! <pre>plt.figure(\"2021 9/8 Specific Humidity\")\nplt.plot(list_time, list_q1, linewidth = 1.0)\nplt.plot(list_time, list_q2, linewidth = 1.0)\nplt.xlabel(\"Time (hr)\")\nplt.ylabel(\"Specific humidity (g/kg)\")\nplt.legend([\"Tower1\", \"Tower2\"])\nplt.title(\"2021 9/8 Specific Humidity\", fontweight = \"bold\")\nplt.xticks(range(0, 25, 1))\nplt.xlim(0, 24.0001)\nplt.grid()\n# plt.savefig('./image/Specific_Humidity.png', dpi = 300)\n\nplt.show()\n</pre> plt.figure(\"2021 9/8 Specific Humidity\") plt.plot(list_time, list_q1, linewidth = 1.0) plt.plot(list_time, list_q2, linewidth = 1.0) plt.xlabel(\"Time (hr)\") plt.ylabel(\"Specific humidity (g/kg)\") plt.legend([\"Tower1\", \"Tower2\"]) plt.title(\"2021 9/8 Specific Humidity\", fontweight = \"bold\") plt.xticks(range(0, 25, 1)) plt.xlim(0, 24.0001) plt.grid() # plt.savefig('./image/Specific_Humidity.png', dpi = 300)  plt.show() In\u00a0[9]: Copied! <pre>plt.figure(\"2021 9/8 Mixing Ratio\")\nplt.plot(list_time, list_r1, linewidth = 1.0)\nplt.plot(list_time, list_r2, linewidth = 1.0)\nplt.xlabel(\"Time (hr)\")\nplt.ylabel(\"Mixing ratio (g/kg)\")\nplt.legend([\"Tower1\", \"Tower2\"])\nplt.title(\"2021 9/8 Mixing Ratio\", fontweight = \"bold\")\nplt.xticks(range(0, 25, 1))\nplt.xlim(0, 24.0001)\nplt.grid()\n# plt.savefig('./image/Mixing_Ratio.png', dpi = 300)\n\n\nplt.show()\n</pre> plt.figure(\"2021 9/8 Mixing Ratio\") plt.plot(list_time, list_r1, linewidth = 1.0) plt.plot(list_time, list_r2, linewidth = 1.0) plt.xlabel(\"Time (hr)\") plt.ylabel(\"Mixing ratio (g/kg)\") plt.legend([\"Tower1\", \"Tower2\"]) plt.title(\"2021 9/8 Mixing Ratio\", fontweight = \"bold\") plt.xticks(range(0, 25, 1)) plt.xlim(0, 24.0001) plt.grid() # plt.savefig('./image/Mixing_Ratio.png', dpi = 300)   plt.show() <p>Import the package.</p> In\u00a0[10]: Copied! <pre>import csv\nimport math\n</pre> import csv import math <p>Initialize and announce the variable.</p> In\u00a0[11]: Copied! <pre>list_ws, list_ws_perTenMin, list_ws24 = [], [], []\nlist_wd, list_wd_perTenMin = [], []\ngust_ws, gust_ws_p10 = [], []\n</pre> list_ws, list_ws_perTenMin, list_ws24 = [], [], [] list_wd, list_wd_perTenMin = [], [] gust_ws, gust_ws_p10 = [], [] <p>Data Pre-processing</p> In\u00a0[12]: Copied! <pre>def getMode (arr):\n\n    mode = []\n    arr_appear = dict((a, arr.count(a)) for a in arr)  # count the times of every item\n    if max(arr_appear.values()) == 1:  # show one time\n        return  # none\n    else:\n        for k, v in arr_appear.items():  # get the most showing times and the biggest\n            if v == max(arr_appear.values()):\n                mode.append(k)\n    return mode\n</pre> def getMode (arr):      mode = []     arr_appear = dict((a, arr.count(a)) for a in arr)  # count the times of every item     if max(arr_appear.values()) == 1:  # show one time         return  # none     else:         for k, v in arr_appear.items():  # get the most showing times and the biggest             if v == max(arr_appear.values()):                 mode.append(k)     return mode  <p>Turn the wind direction into 16 bearings.</p> In\u00a0[13]: Copied! <pre>def diverseWindDirection (x):\n\n    direction = []\n\n    if x == 0:\n        direction.append(\"Calm\")\n        return direction[0]\n    # elif 348.749 &lt; x &lt; 359.999 or 0.001 &lt; x &lt; 11.241:\n    #     direction.append(\"N\")\n    #     return direction[0]\n    elif 11.249 &lt; x &lt; 33.741:\n        direction.append(77.5)\n        return direction[0]\n    elif 33.749 &lt; x &lt; 56.241:\n        direction.append(45)\n        return direction[0]\n    elif 56.249 &lt; x &lt; 78.741:\n        direction.append(22.5)\n        return direction[0]\n    elif 78.749 &lt; x &lt; 101.241:\n        direction.append(0)\n        return direction[0]\n    elif 101.249 &lt; x &lt; 123.741:\n        direction.append(337.5)\n        return direction[0]\n    elif 123.749 &lt; x &lt; 146.241:\n        direction.append(315)\n        return direction[0]\n    elif 146.249 &lt; x &lt; 168.741:\n        direction.append(292.5)\n        return direction[0]\n    elif 168.749 &lt; x &lt; 191.241:\n        direction.append(270)\n        return direction[0]\n    elif 191.249 &lt; x &lt; 213.741:\n        direction.append(247.5)\n        return direction[0]\n    elif 213.749 &lt; x &lt; 236.241:\n        direction.append(225)\n        return direction[0]\n    elif 236.249 &lt; x &lt; 258.741:\n        direction.append(202.5)\n        return direction[0]\n    elif 258.749 &lt; x &lt; 281.241:\n        direction.append(180)\n        return direction[0]\n    elif 281.249 &lt; x &lt; 303.741:\n        direction.append(157.5)\n        return direction[0]\n    elif 303.749 &lt; x &lt; 326.241:\n        direction.append(135)\n        return direction[0]\n    elif 326.249 &lt; x &lt; 348.741:\n        direction.append(112.5)\n        return direction[0]\n    else:\n        direction.append(90)\n        return direction[0]\n</pre> def diverseWindDirection (x):      direction = []      if x == 0:         direction.append(\"Calm\")         return direction[0]     # elif 348.749 &lt; x &lt; 359.999 or 0.001 &lt; x &lt; 11.241:     #     direction.append(\"N\")     #     return direction[0]     elif 11.249 &lt; x &lt; 33.741:         direction.append(77.5)         return direction[0]     elif 33.749 &lt; x &lt; 56.241:         direction.append(45)         return direction[0]     elif 56.249 &lt; x &lt; 78.741:         direction.append(22.5)         return direction[0]     elif 78.749 &lt; x &lt; 101.241:         direction.append(0)         return direction[0]     elif 101.249 &lt; x &lt; 123.741:         direction.append(337.5)         return direction[0]     elif 123.749 &lt; x &lt; 146.241:         direction.append(315)         return direction[0]     elif 146.249 &lt; x &lt; 168.741:         direction.append(292.5)         return direction[0]     elif 168.749 &lt; x &lt; 191.241:         direction.append(270)         return direction[0]     elif 191.249 &lt; x &lt; 213.741:         direction.append(247.5)         return direction[0]     elif 213.749 &lt; x &lt; 236.241:         direction.append(225)         return direction[0]     elif 236.249 &lt; x &lt; 258.741:         direction.append(202.5)         return direction[0]     elif 258.749 &lt; x &lt; 281.241:         direction.append(180)         return direction[0]     elif 281.249 &lt; x &lt; 303.741:         direction.append(157.5)         return direction[0]     elif 303.749 &lt; x &lt; 326.241:         direction.append(135)         return direction[0]     elif 326.249 &lt; x &lt; 348.741:         direction.append(112.5)         return direction[0]     else:         direction.append(90)         return direction[0] <p>Rate the wind speed in Atmospheric specific level.</p> In\u00a0[14]: Copied! <pre>def diverseBeaufortScale (x):\n\n    beaufortScale = []\n\n    if 0 &lt; x &lt; 0.2001:\n        beaufortScale.append('0')\n        return beaufortScale[0]\n    elif 0.2999 &lt; x &lt; 1.5001:\n        beaufortScale.append('1')\n        return beaufortScale[0]\n    elif 1.5999 &lt; x &lt; 3.3001:\n        beaufortScale.append('2')\n        return beaufortScale[0]\n    elif 3.3339 &lt; x &lt; 5.4001:\n        beaufortScale.append('3')\n        return beaufortScale[0]\n    elif 5.4999 &lt; x &lt; 7.9001:\n        beaufortScale.append('4')\n        return beaufortScale[0]\n    elif 7.9999 &lt; x &lt; 10.7001:\n        beaufortScale.append('5')\n        return beaufortScale[0]\n    elif 10.7999 &lt; x &lt; 13.8001:\n        beaufortScale.append('6')\n        return beaufortScale[0]\n    elif 13.7999 &lt; x &lt; 17.1001:\n        beaufortScale.append('7')\n        return beaufortScale[0]\n    elif 17.2001 &lt; x &lt; 20.7001:\n        beaufortScale.append('8')\n        return beaufortScale[0]\n    elif 20.7999 &lt; x &lt; 24.4001:\n        beaufortScale.append('9')\n        return beaufortScale[0]\n    elif 24.4999 &lt; x &lt; 28.4001:\n        beaufortScale.append('10')\n        return beaufortScale[0]\n    elif 28.4999 &lt; x &lt; 32.6001:\n        beaufortScale.append('11')\n        return beaufortScale[0]\n    elif 32.6999 &lt; x &lt; 36.9001:\n        beaufortScale.append('12')\n        return beaufortScale[0]\n    elif 36.999 &lt; x &lt; 41.1001:\n        beaufortScale.append('13')\n        return beaufortScale[0]\n    elif 41.4999 &lt; x &lt; 46.1001:\n        beaufortScale.append('14')\n        return beaufortScale[0]\n    elif 46.1999 &lt; x &lt; 50.9001:\n        beaufortScale.append('15')\n        return beaufortScale[0]\n    elif 50.9999 &lt; x &lt; 56.0001:\n        beaufortScale.append('16')\n        return beaufortScale[0]\n    elif 56.0999 &lt; x &lt; 61.2001:\n        beaufortScale.append('17')\n        return beaufortScale[0]\n</pre> def diverseBeaufortScale (x):      beaufortScale = []      if 0 &lt; x &lt; 0.2001:         beaufortScale.append('0')         return beaufortScale[0]     elif 0.2999 &lt; x &lt; 1.5001:         beaufortScale.append('1')         return beaufortScale[0]     elif 1.5999 &lt; x &lt; 3.3001:         beaufortScale.append('2')         return beaufortScale[0]     elif 3.3339 &lt; x &lt; 5.4001:         beaufortScale.append('3')         return beaufortScale[0]     elif 5.4999 &lt; x &lt; 7.9001:         beaufortScale.append('4')         return beaufortScale[0]     elif 7.9999 &lt; x &lt; 10.7001:         beaufortScale.append('5')         return beaufortScale[0]     elif 10.7999 &lt; x &lt; 13.8001:         beaufortScale.append('6')         return beaufortScale[0]     elif 13.7999 &lt; x &lt; 17.1001:         beaufortScale.append('7')         return beaufortScale[0]     elif 17.2001 &lt; x &lt; 20.7001:         beaufortScale.append('8')         return beaufortScale[0]     elif 20.7999 &lt; x &lt; 24.4001:         beaufortScale.append('9')         return beaufortScale[0]     elif 24.4999 &lt; x &lt; 28.4001:         beaufortScale.append('10')         return beaufortScale[0]     elif 28.4999 &lt; x &lt; 32.6001:         beaufortScale.append('11')         return beaufortScale[0]     elif 32.6999 &lt; x &lt; 36.9001:         beaufortScale.append('12')         return beaufortScale[0]     elif 36.999 &lt; x &lt; 41.1001:         beaufortScale.append('13')         return beaufortScale[0]     elif 41.4999 &lt; x &lt; 46.1001:         beaufortScale.append('14')         return beaufortScale[0]     elif 46.1999 &lt; x &lt; 50.9001:         beaufortScale.append('15')         return beaufortScale[0]     elif 50.9999 &lt; x &lt; 56.0001:         beaufortScale.append('16')         return beaufortScale[0]     elif 56.0999 &lt; x &lt; 61.2001:         beaufortScale.append('17')         return beaufortScale[0] <p>Read the file and get the data we want to analyze.</p> In\u00a0[15]: Copied! <pre>inputFile1 = open(\"./data/10M_tower_data1.csv\", 'r')\ndataReader1 = csv.reader(inputFile1)\n\nfor line1 in dataReader1:\n\n    if line1[1] == '9' and line1[2] == '8':\n        # line1[4] = int(line1[4])\n        list_ws24.append(float(line1[7]))\n\n        if int(line1[4]) &gt;= 50:\n            list_ws.append(float(line1[7]))\n            list_wd.append(float(line1[8]))\n\n\ninputFile1.close()\n</pre> inputFile1 = open(\"./data/10M_tower_data1.csv\", 'r') dataReader1 = csv.reader(inputFile1)  for line1 in dataReader1:      if line1[1] == '9' and line1[2] == '8':         # line1[4] = int(line1[4])         list_ws24.append(float(line1[7]))          if int(line1[4]) &gt;= 50:             list_ws.append(float(line1[7]))             list_wd.append(float(line1[8]))   inputFile1.close() <p>Find ten minutes before every hours and diverse to sixteen bearings. To get average wind direction.</p> In\u00a0[16]: Copied! <pre>num, situate = 0, 0\nlist_wd_avg, mode, list_mode, list_count, list_new = [], [], [], [], []\n\n\nfor i in range(0, len(list_wd), 10):\n    list_wd16 = []\n    list_wd_perTenMin = list_wd[i: (i + 10)]\n    list_ws_perTenMin = list_ws[i: (i + 10)]\n    num += 1\n    # print(num)\n    # print(list_wd_perTenMin)\n    # print(list_ws_perTenMin)\n\n    for j in list_wd_perTenMin:\n        list_wd16.append(diverseWindDirection(j))\n\n    for k in range(0, len(list_wd16), 10):\n        list_wd16 = list_wd16[k: (k + 10)]\n        # print(list_wd16)        # 16 bearings\n        mode = getMode(list_wd16)\n        if len(mode) == 1:\n            list_mode.append(mode[0])\n        else:\n            list_count = []\n            for l in range(0, len(mode)):\n                for m in range(10):\n                    if list_wd16[m] == mode[l]:\n                        list_count.append(m)\n\n            # print(list_count)\n\n            for n in list_count:\n                list_new.append(list_ws_perTenMin[n])\n\n            situate = list_count[list_new.index(max(list_new))]\n            list_mode.append(list_wd16[situate])\n            list_new = []\n\n        list_count = []\n\nhour = 0\n\nfor i in range(len(list_mode)):\n    hour += 1\n\n    print(\"Hour:\", hour, \"\\tWind Direction average:\", list_mode[i])\n</pre> num, situate = 0, 0 list_wd_avg, mode, list_mode, list_count, list_new = [], [], [], [], []   for i in range(0, len(list_wd), 10):     list_wd16 = []     list_wd_perTenMin = list_wd[i: (i + 10)]     list_ws_perTenMin = list_ws[i: (i + 10)]     num += 1     # print(num)     # print(list_wd_perTenMin)     # print(list_ws_perTenMin)      for j in list_wd_perTenMin:         list_wd16.append(diverseWindDirection(j))      for k in range(0, len(list_wd16), 10):         list_wd16 = list_wd16[k: (k + 10)]         # print(list_wd16)        # 16 bearings         mode = getMode(list_wd16)         if len(mode) == 1:             list_mode.append(mode[0])         else:             list_count = []             for l in range(0, len(mode)):                 for m in range(10):                     if list_wd16[m] == mode[l]:                         list_count.append(m)              # print(list_count)              for n in list_count:                 list_new.append(list_ws_perTenMin[n])              situate = list_count[list_new.index(max(list_new))]             list_mode.append(list_wd16[situate])             list_new = []          list_count = []  hour = 0  for i in range(len(list_mode)):     hour += 1      print(\"Hour:\", hour, \"\\tWind Direction average:\", list_mode[i]) <pre>Hour: 1 \tWind Direction average: 247.5\nHour: 2 \tWind Direction average: 225\nHour: 3 \tWind Direction average: 247.5\nHour: 4 \tWind Direction average: 247.5\nHour: 5 \tWind Direction average: 225\nHour: 6 \tWind Direction average: 247.5\nHour: 7 \tWind Direction average: 247.5\nHour: 8 \tWind Direction average: 247.5\nHour: 9 \tWind Direction average: 202.5\nHour: 10 \tWind Direction average: 157.5\nHour: 11 \tWind Direction average: 112.5\nHour: 12 \tWind Direction average: 112.5\nHour: 13 \tWind Direction average: 90\nHour: 14 \tWind Direction average: 90\nHour: 15 \tWind Direction average: 77.5\nHour: 16 \tWind Direction average: 90\nHour: 17 \tWind Direction average: 22.5\nHour: 18 \tWind Direction average: 22.5\nHour: 19 \tWind Direction average: 0\nHour: 20 \tWind Direction average: 22.5\nHour: 21 \tWind Direction average: 0\nHour: 22 \tWind Direction average: 337.5\nHour: 23 \tWind Direction average: 315\nHour: 24 \tWind Direction average: 292.5\n</pre> In\u00a0[17]: Copied! <pre>hour = 0\nlist_ws_avg = []\n\n\nfor i in range(0, len(list_ws), 10):\n    list_ws_perTenMin = list_ws[i: (i+10)]\n    # print(list_ws_perTenMin)\n    ws = 0\n\n    for j in range(len(list_ws_perTenMin)):\n        ws += list_ws_perTenMin[j]\n\n    ws_avg = round((ws/10), 1)\n    list_ws_avg.append(ws_avg)\n    hour += 1\n    print(\"Hour:\", hour, \"\\tWind Speed Average:\", ws_avg)\n</pre> hour = 0 list_ws_avg = []   for i in range(0, len(list_ws), 10):     list_ws_perTenMin = list_ws[i: (i+10)]     # print(list_ws_perTenMin)     ws = 0      for j in range(len(list_ws_perTenMin)):         ws += list_ws_perTenMin[j]      ws_avg = round((ws/10), 1)     list_ws_avg.append(ws_avg)     hour += 1     print(\"Hour:\", hour, \"\\tWind Speed Average:\", ws_avg) <pre>Hour: 1 \tWind Speed Average: 2.0\nHour: 2 \tWind Speed Average: 2.4\nHour: 3 \tWind Speed Average: 2.1\nHour: 4 \tWind Speed Average: 1.3\nHour: 5 \tWind Speed Average: 0.9\nHour: 6 \tWind Speed Average: 1.2\nHour: 7 \tWind Speed Average: 1.2\nHour: 8 \tWind Speed Average: 1.7\nHour: 9 \tWind Speed Average: 1.9\nHour: 10 \tWind Speed Average: 1.3\nHour: 11 \tWind Speed Average: 2.1\nHour: 12 \tWind Speed Average: 3.1\nHour: 13 \tWind Speed Average: 3.7\nHour: 14 \tWind Speed Average: 3.5\nHour: 15 \tWind Speed Average: 3.3\nHour: 16 \tWind Speed Average: 4.0\nHour: 17 \tWind Speed Average: 2.2\nHour: 18 \tWind Speed Average: 3.8\nHour: 19 \tWind Speed Average: 2.9\nHour: 20 \tWind Speed Average: 3.2\nHour: 21 \tWind Speed Average: 3.3\nHour: 22 \tWind Speed Average: 2.5\nHour: 23 \tWind Speed Average: 2.3\nHour: 24 \tWind Speed Average: 1.8\n</pre> <p>Diverse to beaufort scale</p> In\u00a0[18]: Copied! <pre>hour = 0\nfor i in list_ws_avg:\n    hour += 1\n    print(\"Hour:\", hour, \"\\tBeaufort Scale:\", diverseBeaufortScale(i))\n</pre> hour = 0 for i in list_ws_avg:     hour += 1     print(\"Hour:\", hour, \"\\tBeaufort Scale:\", diverseBeaufortScale(i)) <pre>Hour: 1 \tBeaufort Scale: 2\nHour: 2 \tBeaufort Scale: 2\nHour: 3 \tBeaufort Scale: 2\nHour: 4 \tBeaufort Scale: 1\nHour: 5 \tBeaufort Scale: 1\nHour: 6 \tBeaufort Scale: 1\nHour: 7 \tBeaufort Scale: 1\nHour: 8 \tBeaufort Scale: 2\nHour: 9 \tBeaufort Scale: 2\nHour: 10 \tBeaufort Scale: 1\nHour: 11 \tBeaufort Scale: 2\nHour: 12 \tBeaufort Scale: 2\nHour: 13 \tBeaufort Scale: 3\nHour: 14 \tBeaufort Scale: 3\nHour: 15 \tBeaufort Scale: 2\nHour: 16 \tBeaufort Scale: 3\nHour: 17 \tBeaufort Scale: 2\nHour: 18 \tBeaufort Scale: 3\nHour: 19 \tBeaufort Scale: 2\nHour: 20 \tBeaufort Scale: 2\nHour: 21 \tBeaufort Scale: 2\nHour: 22 \tBeaufort Scale: 2\nHour: 23 \tBeaufort Scale: 2\nHour: 24 \tBeaufort Scale: 2\n</pre> In\u00a0[19]: Copied! <pre>angle = []\nu, v, hour = 0, 0, 0\n\nfor i in range(0, 24):\n    angle = math.radians(list_mode[i])\n    u = (abs(round(list_ws_avg[i] * math.cos(angle), 1)))\n    v = (abs(round(list_ws_avg[i] * math.sin(angle), 1)))\n    hour += 1\n\n    print( \"hour:\", hour, \"\\tu_wind:\",  u, \"\\t,\", \"v_wind:\", v)\n</pre> angle = [] u, v, hour = 0, 0, 0  for i in range(0, 24):     angle = math.radians(list_mode[i])     u = (abs(round(list_ws_avg[i] * math.cos(angle), 1)))     v = (abs(round(list_ws_avg[i] * math.sin(angle), 1)))     hour += 1      print( \"hour:\", hour, \"\\tu_wind:\",  u, \"\\t,\", \"v_wind:\", v) <pre>hour: 1 \tu_wind: 0.8 \t, v_wind: 1.8\nhour: 2 \tu_wind: 1.7 \t, v_wind: 1.7\nhour: 3 \tu_wind: 0.8 \t, v_wind: 1.9\nhour: 4 \tu_wind: 0.5 \t, v_wind: 1.2\nhour: 5 \tu_wind: 0.6 \t, v_wind: 0.6\nhour: 6 \tu_wind: 0.5 \t, v_wind: 1.1\nhour: 7 \tu_wind: 0.5 \t, v_wind: 1.1\nhour: 8 \tu_wind: 0.7 \t, v_wind: 1.6\nhour: 9 \tu_wind: 1.8 \t, v_wind: 0.7\nhour: 10 \tu_wind: 1.2 \t, v_wind: 0.5\nhour: 11 \tu_wind: 0.8 \t, v_wind: 1.9\nhour: 12 \tu_wind: 1.2 \t, v_wind: 2.9\nhour: 13 \tu_wind: 0.0 \t, v_wind: 3.7\nhour: 14 \tu_wind: 0.0 \t, v_wind: 3.5\nhour: 15 \tu_wind: 0.7 \t, v_wind: 3.2\nhour: 16 \tu_wind: 0.0 \t, v_wind: 4.0\nhour: 17 \tu_wind: 2.0 \t, v_wind: 0.8\nhour: 18 \tu_wind: 3.5 \t, v_wind: 1.5\nhour: 19 \tu_wind: 2.9 \t, v_wind: 0.0\nhour: 20 \tu_wind: 3.0 \t, v_wind: 1.2\nhour: 21 \tu_wind: 3.3 \t, v_wind: 0.0\nhour: 22 \tu_wind: 2.3 \t, v_wind: 1.0\nhour: 23 \tu_wind: 1.6 \t, v_wind: 1.6\nhour: 24 \tu_wind: 0.7 \t, v_wind: 1.7\n</pre> In\u00a0[20]: Copied! <pre>time = 0\n\nfor i in range(0, len(list_ws24), 10):\n    list_ws24_p10 = list_ws24[i: (i+10)]\n    # print(list_ws24_p10)\n    ws_p10_max = max(list_ws24_p10)\n    gap = 0\n    ws_p10 = 0\n\n    for j in range(0, len(list_ws24_p10)):\n        ws_p10 += list_ws24_p10[j]\n\n    ws_p10_avg = ws_p10/10\n    gap = ws_p10_max - ws_p10_avg\n    time += 1\n    if gap &gt; 5:\n        gust_ws.append(ws_p10_max)\n    else:\n        gust_ws.append(\"NaN\")\n\nhour = 0\n\nfor i in range(0, len(gust_ws), 6):\n    gust_ws_p10 = gust_ws[i: (i+6)]\n    count = 0\n    hour += 1\n    for j in range(len(gust_ws_p10)):\n        if gust_ws_p10[j] == \"NaN\":\n            count += 1\n            if count == 6:\n                print(\"Hour:\", hour, \"\\tgust_ws:\", \"NaN\")\n        else:\n            print(\"Hour:\", hour, \"gust_ws:\", gust_ws_p10[j])\n</pre> time = 0  for i in range(0, len(list_ws24), 10):     list_ws24_p10 = list_ws24[i: (i+10)]     # print(list_ws24_p10)     ws_p10_max = max(list_ws24_p10)     gap = 0     ws_p10 = 0      for j in range(0, len(list_ws24_p10)):         ws_p10 += list_ws24_p10[j]      ws_p10_avg = ws_p10/10     gap = ws_p10_max - ws_p10_avg     time += 1     if gap &gt; 5:         gust_ws.append(ws_p10_max)     else:         gust_ws.append(\"NaN\")  hour = 0  for i in range(0, len(gust_ws), 6):     gust_ws_p10 = gust_ws[i: (i+6)]     count = 0     hour += 1     for j in range(len(gust_ws_p10)):         if gust_ws_p10[j] == \"NaN\":             count += 1             if count == 6:                 print(\"Hour:\", hour, \"\\tgust_ws:\", \"NaN\")         else:             print(\"Hour:\", hour, \"gust_ws:\", gust_ws_p10[j])  <pre>Hour: 1 \tgust_ws: NaN\nHour: 2 \tgust_ws: NaN\nHour: 3 \tgust_ws: NaN\nHour: 4 \tgust_ws: NaN\nHour: 5 \tgust_ws: NaN\nHour: 6 \tgust_ws: NaN\nHour: 7 \tgust_ws: NaN\nHour: 8 \tgust_ws: NaN\nHour: 9 \tgust_ws: NaN\nHour: 10 \tgust_ws: NaN\nHour: 11 \tgust_ws: NaN\nHour: 12 \tgust_ws: NaN\nHour: 13 \tgust_ws: NaN\nHour: 14 \tgust_ws: NaN\nHour: 15 \tgust_ws: NaN\nHour: 16 \tgust_ws: NaN\nHour: 17 \tgust_ws: NaN\nHour: 18 \tgust_ws: NaN\nHour: 19 \tgust_ws: NaN\nHour: 20 \tgust_ws: NaN\nHour: 21 \tgust_ws: NaN\nHour: 22 \tgust_ws: NaN\nHour: 23 \tgust_ws: NaN\nHour: 24 \tgust_ws: NaN\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"showcase/tower/#tower-data-analysis","title":"Tower Data Analysis\u00b6","text":"<p>This code is to analysis the atmospheric data between two towers. And the date which we pick up to analyze is 2021/9/8.</p>"},{"location":"showcase/tower/#first-analysis","title":"First Analysis\u00b6","text":""},{"location":"showcase/tower/#saturated-water-vapor-pressure","title":"Saturated Water Vapor Pressure\u00b6","text":""},{"location":"showcase/tower/#water-vapor-pressure","title":"Water Vapor Pressure\u00b6","text":""},{"location":"showcase/tower/#dew-point-temperature","title":"Dew Point Temperature\u00b6","text":""},{"location":"showcase/tower/#specific-humidity","title":"Specific Humidity\u00b6","text":""},{"location":"showcase/tower/#mixing-ratio","title":"Mixing Ratio\u00b6","text":""},{"location":"showcase/tower/#first-analysis","title":"First Analysis\u00b6","text":"<p>This code is to analysis the atmospheric data from tower.</p>"},{"location":"showcase/tower/#show-wind-direction-average","title":"Show wind direction average.\u00b6","text":""},{"location":"showcase/tower/#find-average-wind-speed","title":"Find average wind speed.\u00b6","text":""},{"location":"showcase/tower/#find-u-and-v-wind","title":"Find u and v wind.\u00b6","text":""},{"location":"showcase/tower/#find-the-gust","title":"Find the gust.\u00b6","text":""},{"location":"showcase/country/country/","title":"Plot Global Map with Basemap","text":""},{"location":"showcase/country/country/#example-code","title":"Example Code","text":"<pre><code>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat =        # you should find the board\nminLon, maxLon =        # you should find the board\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\n\nparallels = np.arange()     # You should change the interval with the country\nmeridians = np.arange()     # You should change the interval with the country\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=14, linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=14, \n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of your_country with Elevation Data', fontsize=20)\n\n# Save the figure and display it.\n\nplt.show()\n</code></pre> <p>\u4ee5\u4e0b\u662f\u4e00\u4e9b\u5e38\u89c1\u7684colormap\u9009\u9879\uff1a</p> <p>Sequential\uff08\u987a\u5e8f\uff09colormap\uff1a\u9002\u7528\u4e8e\u8868\u793a\u6570\u636e\u7684\u8fde\u7eed\u53d8\u5316\uff0c\u4f8b\u5982\u6e29\u5ea6\u3001\u6d77\u62d4\u7b49\u3002 - 'viridis' - 'plasma' - 'inferno' - 'magma' - 'cividis'</p> <p>Diverging\uff08\u53d1\u6563\uff09colormap\uff1a\u9002\u7528\u4e8e\u8868\u793a\u6570\u636e\u7684\u6b63\u8d1f\u53d8\u5316\u6216\u5bf9\u6bd4\uff0c\u4f8b\u5982\u6b63\u8d1f\u6e29\u5ea6\u5dee\u5f02\u3001\u6b63\u8d1f\u5dee\u5f02\u7b49\u3002 - 'coolwarm' - 'bwr' (blue-white-red) - 'RdBu' (red-blue)</p> <p>Qualitative\uff08\u5b9a\u6027\uff09colormap\uff1a\u9002\u7528\u4e8e\u8868\u793a\u79bb\u6563\u7684\u7c7b\u522b\u6216\u6807\u7b7e\uff0c\u6ca1\u6709\u660e\u663e\u7684\u987a\u5e8f\u5173\u7cfb\u3002 - 'tab10' - 'Set1' - 'Pastel1' - 'Dark2'</p> <p>Miscellaneous\uff08\u5176\u4ed6\uff09colormap\uff1a\u4e00\u4e9b\u7279\u6b8a\u7684colormap\u9009\u9879\u3002 - 'rainbow' - 'jet' - 'gray'</p> <p>\u7ed8\u5236\u5dde\u6216\u7701\u7684\u8fb9\u754c\uff1a <pre><code>m.drawstates(color='k')\n</code></pre> \u7ed8\u5236\u6cb3\u6d41\uff1a <pre><code>m.drawrivers(color='b', linewidth=0.5)\n</code></pre> \u7ed8\u5236\u6e56\u6cca\uff1a <pre><code>m.drawlakes(color='b')\n\u7ed8\u5236\u9646\u5730/\u5c9b\u5c7f\uff1a\n</code></pre> <pre><code>m.fillcontinents(color='green', lake_color='blue')\n</code></pre> \u7ed8\u5236\u57ce\u5e02\u6216\u5730\u70b9\uff1a <pre><code>lats = [latitude1, latitude2, ...]\nlons = [longitude1, longitude2, ...]\nx, y = m(lons, lats)\nm.plot(x, y, 'ro', markersize=5)\n</code></pre></p>"},{"location":"showcase/country/country/#reference","title":"Reference","text":"<p>[Python] Basemap\u5305\u6392\u96f7\u8bb0\u5f55</p>"},{"location":"showcase/country/draw_Africa/","title":"Africa","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = -40, 40\nminLon, maxLon = -20, 60\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\n\nparallels = np.arange(-40, 41, 20)\nmeridians = np.arange(-20, 61, 20)\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=14, linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=14, \n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of Africa with Elevation Data', fontsize=20)\n\n# Save the figure and display it.\n\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = -40, 40 minLon, maxLon = -20, 60  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k')  # Add the parallels and meridians.  parallels = np.arange(-40, 41, 20) meridians = np.arange(-20, 61, 20) m.drawparallels(     parallels,      labels=[1, 0, 0, 0],      fontsize=14, linewidth=0.5 ) m.drawmeridians(     meridians,      labels=[0, 0, 0, 1],      fontsize=14,      linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of Africa with Elevation Data', fontsize=20)  # Save the figure and display it.  plt.show()  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"showcase/country/draw_Africa/#africa","title":"Africa\u00b6","text":""},{"location":"showcase/country/draw_Americas/","title":"Americas","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = -60, 80\nminLon, maxLon = -170, -30\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\n\nparallels = np.arange(-60, 81, 20)\nmeridians = np.arange(-170, -29, 40)\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=14, linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=14, \n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of the Americas with Elevation Data', fontsize=20)\n\n# Save the figure and display it.\n\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = -60, 80 minLon, maxLon = -170, -30  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k')  # Add the parallels and meridians.  parallels = np.arange(-60, 81, 20) meridians = np.arange(-170, -29, 40) m.drawparallels(     parallels,      labels=[1, 0, 0, 0],      fontsize=14, linewidth=0.5 ) m.drawmeridians(     meridians,      labels=[0, 0, 0, 1],      fontsize=14,      linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of the Americas with Elevation Data', fontsize=20)  # Save the figure and display it.  plt.show()  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"showcase/country/draw_Americas/#americas","title":"Americas\u00b6","text":""},{"location":"showcase/country/draw_Arabia/","title":"Arabia","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = 12.0, 32.0\nminLon, maxLon = 30.0, 60.0\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\n\nparallels = range(int(minLat), int(maxLat)+1, 4)\nmeridians = range(int(minLon), int(maxLon)+1, 6)\nm.drawparallels(\n    parallels,\n    labels=[1, 0, 0, 0],\n    fontsize=14,\n    linewidth=0.5\n)\nm.drawmeridians(\n    meridians,\n    labels=[0, 0, 0, 1],\n    fontsize=14,\n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of Arabia with Elevation Data', fontsize=20)\n\n# Display the plot.\n\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = 12.0, 32.0 minLon, maxLon = 30.0, 60.0  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k')  # Add the parallels and meridians.  parallels = range(int(minLat), int(maxLat)+1, 4) meridians = range(int(minLon), int(maxLon)+1, 6) m.drawparallels(     parallels,     labels=[1, 0, 0, 0],     fontsize=14,     linewidth=0.5 ) m.drawmeridians(     meridians,     labels=[0, 0, 0, 1],     fontsize=14,     linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of Arabia with Elevation Data', fontsize=20)  # Display the plot.  plt.show()  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"showcase/country/draw_Arabia/#arabia","title":"Arabia\u00b6","text":""},{"location":"showcase/country/draw_Arctic/","title":"Arctic region","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = 66.0, 90.0\nminLon, maxLon = -180.0, 180.0\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='npstere',\n    boundinglat=minLat,\n    lon_0=0.0,\n    resolution='l',\n    round=True,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline.\n\nm.drawcoastlines(color='k')\n\n# Add the parallels and meridians.\n\nparallels = np.arange(60, 91, 10)\nmeridians = np.arange(-180, 181, 30)\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=14, linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=14, \n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of the Arctic with Elevation Data', fontsize=20)\n\n# Save the figure and display it.\n\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = 66.0, 90.0 minLon, maxLon = -180.0, 180.0  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='npstere',     boundinglat=minLat,     lon_0=0.0,     resolution='l',     round=True,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline.  m.drawcoastlines(color='k')  # Add the parallels and meridians.  parallels = np.arange(60, 91, 10) meridians = np.arange(-180, 181, 30) m.drawparallels(     parallels,      labels=[1, 0, 0, 0],      fontsize=14, linewidth=0.5 ) m.drawmeridians(     meridians,      labels=[0, 0, 0, 1],      fontsize=14,      linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of the Arctic with Elevation Data', fontsize=20)  # Save the figure and display it.  plt.show()  <pre>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"showcase/country/draw_Arctic/#arctic-region","title":"Arctic region\u00b6","text":""},{"location":"showcase/country/draw_Asia/","title":"Asia","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = -10, 65\nminLon, maxLon = 60, 150\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\n\nparallels = np.arange(0, 70, 10)\nmeridians = np.arange(60, 160, 10)\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=14, linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=14, \n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of Asia with Elevation Data', fontsize=20)\n\n# Save the figure and display it.\n\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = -10, 65 minLon, maxLon = 60, 150  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k')  # Add the parallels and meridians.  parallels = np.arange(0, 70, 10) meridians = np.arange(60, 160, 10) m.drawparallels(     parallels,      labels=[1, 0, 0, 0],      fontsize=14, linewidth=0.5 ) m.drawmeridians(     meridians,      labels=[0, 0, 0, 1],      fontsize=14,      linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of Asia with Elevation Data', fontsize=20)  # Save the figure and display it.  plt.show()  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"showcase/country/draw_Asia/#asia","title":"Asia\u00b6","text":""},{"location":"showcase/country/draw_Boston/","title":"Boston","text":"In\u00a0[1]: Copied! <pre>'''\n@version: 1.0.0\n@date: 2023/05/18\n@brief: Draw a map of Boston with elevation data.\n\nThis script uses the mpl_toolkits.basemap package \nto draw a map of Boston with a colorbar showing elevation data. \nThe map is centered on Boston and shows its surrounding seas and countries.\n\nmain.py\n'''\n\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map for Boston.\n\n# minLat, maxLat = 40.5, 42.5\nminLat, maxLat = 40.5, 43\n# minLon, maxLon = -71.25, -69.75\nminLon, maxLon = -72, -69.75\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\n\nparallels = np.arange(40.5, 42.6, 0.5)\nmeridians = np.arange(-71.25, -69.74, 0.5)\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=10, \n    linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=10, \n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of Boston', fontsize=20)\n\nplt.show()\n</pre> ''' @version: 1.0.0 @date: 2023/05/18 @brief: Draw a map of Boston with elevation data.  This script uses the mpl_toolkits.basemap package  to draw a map of Boston with a colorbar showing elevation data.  The map is centered on Boston and shows its surrounding seas and countries.  main.py '''  import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Set the latitudinal and longitudinal limits of the map for Boston.  # minLat, maxLat = 40.5, 42.5 minLat, maxLat = 40.5, 43 # minLon, maxLon = -71.25, -69.75 minLon, maxLon = -72, -69.75  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k')  # Add the parallels and meridians.  parallels = np.arange(40.5, 42.6, 0.5) meridians = np.arange(-71.25, -69.74, 0.5) m.drawparallels(     parallels,      labels=[1, 0, 0, 0],      fontsize=10,      linewidth=0.5 ) m.drawmeridians(     meridians,      labels=[0, 0, 0, 1],      fontsize=10,      linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of Boston', fontsize=20)  plt.show()  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"showcase/country/draw_Boston/#boston","title":"Boston\u00b6","text":""},{"location":"showcase/country/draw_Canada/","title":"Canada","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = 41.68, 83.11\nminLon, maxLon = -141.01, -52.62\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\n\nparallels = np.arange(40, 90, 10)\nmeridians = np.arange(-140, -50, 20)\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=14, linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=14, \n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of Canada with Elevation Data', fontsize=20)\n\n# Save the figure and display it.\n\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = 41.68, 83.11 minLon, maxLon = -141.01, -52.62  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k')  # Add the parallels and meridians.  parallels = np.arange(40, 90, 10) meridians = np.arange(-140, -50, 20) m.drawparallels(     parallels,      labels=[1, 0, 0, 0],      fontsize=14, linewidth=0.5 ) m.drawmeridians(     meridians,      labels=[0, 0, 0, 1],      fontsize=14,      linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of Canada with Elevation Data', fontsize=20)  # Save the figure and display it.  plt.show()  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"showcase/country/draw_Canada/#canada","title":"Canada\u00b6","text":""},{"location":"showcase/country/draw_China/","title":"China","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = 18.0, 53.0\nminLon, maxLon = 73.5, 135.0\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\n\nparallels = np.arange(20, 60, 10)\nmeridians = np.arange(80, 140, 10)\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=14, linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=14, \n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of China with Elevation Data', fontsize=20)\n\n# Save the figure and display it.\n\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = 18.0, 53.0 minLon, maxLon = 73.5, 135.0  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k')  # Add the parallels and meridians.  parallels = np.arange(20, 60, 10) meridians = np.arange(80, 140, 10) m.drawparallels(     parallels,      labels=[1, 0, 0, 0],      fontsize=14, linewidth=0.5 ) m.drawmeridians(     meridians,      labels=[0, 0, 0, 1],      fontsize=14,      linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of China with Elevation Data', fontsize=20)  # Save the figure and display it.  plt.show() In\u00a0[2]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = 18.0, 53.0\nminLon, maxLon = 73.5, 135.0\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\n\nparallels = np.arange(20, 60, 10)\nmeridians = np.arange(80, 140, 10)\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=14, linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=14, \n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of China with Elevation Data', fontsize=20)\n\n# Create a dummy image for the colorbar.\n\nim = ax.imshow(np.zeros((4, 4)), cmap='Blues', vmin=0, vmax=1)\n\n# Add a colorbar with the specified label and position.\n\ncolorbar = plt.colorbar(im, orientation='horizontal', fraction=0.046, pad=0.1, label='Elevation (m)')\n\n# Save the figure and display it.\n\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = 18.0, 53.0 minLon, maxLon = 73.5, 135.0  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k')  # Add the parallels and meridians.  parallels = np.arange(20, 60, 10) meridians = np.arange(80, 140, 10) m.drawparallels(     parallels,      labels=[1, 0, 0, 0],      fontsize=14, linewidth=0.5 ) m.drawmeridians(     meridians,      labels=[0, 0, 0, 1],      fontsize=14,      linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of China with Elevation Data', fontsize=20)  # Create a dummy image for the colorbar.  im = ax.imshow(np.zeros((4, 4)), cmap='Blues', vmin=0, vmax=1)  # Add a colorbar with the specified label and position.  colorbar = plt.colorbar(im, orientation='horizontal', fraction=0.046, pad=0.1, label='Elevation (m)')  # Save the figure and display it.  plt.show()  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"showcase/country/draw_China/#china","title":"China\u00b6","text":""},{"location":"showcase/country/draw_Egypt/","title":"Egypt","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = 22.0, 31.0\nminLon, maxLon = 25.0, 35.0\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\n\nparallels = range(int(minLat), int(maxLat)+1, 2)\nmeridians = range(int(minLon), int(maxLon)+1, 2)\nm.drawparallels(\n    parallels,\n    labels=[1, 0, 0, 0],\n    fontsize=14,\n    linewidth=0.5\n)\nm.drawmeridians(\n    meridians,\n    labels=[0, 0, 0, 1],\n    fontsize=14,\n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of Egypt with Elevation Data', fontsize=20)\n\n# Display the plot.\n\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = 22.0, 31.0 minLon, maxLon = 25.0, 35.0  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k')  # Add the parallels and meridians.  parallels = range(int(minLat), int(maxLat)+1, 2) meridians = range(int(minLon), int(maxLon)+1, 2) m.drawparallels(     parallels,     labels=[1, 0, 0, 0],     fontsize=14,     linewidth=0.5 ) m.drawmeridians(     meridians,     labels=[0, 0, 0, 1],     fontsize=14,     linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of Egypt with Elevation Data', fontsize=20)  # Display the plot.  plt.show()  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"showcase/country/draw_Egypt/#egypt","title":"Egypt\u00b6","text":""},{"location":"showcase/country/draw_Europe/","title":"Europe","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = 35, 70\nminLon, maxLon = -15, 40\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\n\nparallels = np.arange(40, 70, 10)\nmeridians = np.arange(-10, 40, 10)\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=14, linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=14, \n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of Europe with Elevation Data', fontsize=20)\n\n# Save the figure and display it.\n\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = 35, 70 minLon, maxLon = -15, 40  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k')  # Add the parallels and meridians.  parallels = np.arange(40, 70, 10) meridians = np.arange(-10, 40, 10) m.drawparallels(     parallels,      labels=[1, 0, 0, 0],      fontsize=14, linewidth=0.5 ) m.drawmeridians(     meridians,      labels=[0, 0, 0, 1],      fontsize=14,      linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of Europe with Elevation Data', fontsize=20)  # Save the figure and display it.  plt.show()  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"showcase/country/draw_Europe/#europe","title":"Europe\u00b6","text":""},{"location":"showcase/country/draw_France/","title":"France","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = 41.0, 51.2\nminLon, maxLon = -5.5, 9.8\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\n\nparallels = np.arange(40., 52.1, 2.)\nmeridians = np.arange(-6., 10.1, 2.)\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=14, linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=14, \n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of France with Elevation Data', fontsize=20)\n\n# Save the figure and display it.\n\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = 41.0, 51.2 minLon, maxLon = -5.5, 9.8  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k')  # Add the parallels and meridians.  parallels = np.arange(40., 52.1, 2.) meridians = np.arange(-6., 10.1, 2.) m.drawparallels(     parallels,      labels=[1, 0, 0, 0],      fontsize=14, linewidth=0.5 ) m.drawmeridians(     meridians,      labels=[0, 0, 0, 1],      fontsize=14,      linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of France with Elevation Data', fontsize=20)  # Save the figure and display it.  plt.show()  In\u00a0[2]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = 41.0, 51.2\nminLon, maxLon = -5.5, 9.8\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Load elevation data (replace with your own elevation data)\n# The data should have the same shape as the map grid.\n\nelevation_data = np.random.rand(100, 100) * 5000  # Example random data\n\n# Define the grid coordinates.\n\nlons = np.linspace(minLon, maxLon, elevation_data.shape[1])\nlats = np.linspace(minLat, maxLat, elevation_data.shape[0])\n\n# Create a meshgrid of the coordinates.\n\nlon_grid, lat_grid = np.meshgrid(lons, lats)\n\n# Draw the contour lines of the elevation data.\n\nlevels = np.linspace(0, elevation_data.max(), 20)\ncontour_set = m.contourf(\n    lon_grid,\n    lat_grid,\n    elevation_data,\n    levels=levels,\n    cmap='gray',  # Change to 'gray' or 'gist_gray'\n    latlon=True\n)\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\n\nparallels = np.arange(40., 52.1, 2.)\nmeridians = np.arange(-6., 10.1, 2.)\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=14,\n    linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=14,\n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of France with Topography', fontsize=20)\n\n# Create a colorbar to represent elevation.\n\ncolorbar = plt.colorbar(\n    contour_set,\n    label='Elevation (m)',\n    fraction=0.046,\n    pad=0.04,\n    cmap='gray',  # Change to 'gray' or 'gist_gray'\n    orientation='horizontal'\n)\n\n# Save the figure and display it.\n\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = 41.0, 51.2 minLon, maxLon = -5.5, 9.8  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Load elevation data (replace with your own elevation data) # The data should have the same shape as the map grid.  elevation_data = np.random.rand(100, 100) * 5000  # Example random data  # Define the grid coordinates.  lons = np.linspace(minLon, maxLon, elevation_data.shape[1]) lats = np.linspace(minLat, maxLat, elevation_data.shape[0])  # Create a meshgrid of the coordinates.  lon_grid, lat_grid = np.meshgrid(lons, lats)  # Draw the contour lines of the elevation data.  levels = np.linspace(0, elevation_data.max(), 20) contour_set = m.contourf(     lon_grid,     lat_grid,     elevation_data,     levels=levels,     cmap='gray',  # Change to 'gray' or 'gist_gray'     latlon=True )  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k')  # Add the parallels and meridians.  parallels = np.arange(40., 52.1, 2.) meridians = np.arange(-6., 10.1, 2.) m.drawparallels(     parallels,      labels=[1, 0, 0, 0],      fontsize=14,     linewidth=0.5 ) m.drawmeridians(     meridians,      labels=[0, 0, 0, 1],      fontsize=14,     linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of France with Topography', fontsize=20)  # Create a colorbar to represent elevation.  colorbar = plt.colorbar(     contour_set,     label='Elevation (m)',     fraction=0.046,     pad=0.04,     cmap='gray',  # Change to 'gray' or 'gist_gray'     orientation='horizontal' )  # Save the figure and display it.  plt.show()"},{"location":"showcase/country/draw_France/#france","title":"France\u00b6","text":""},{"location":"showcase/country/draw_Germany/","title":"draw Germany","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = 47.27, 55.1\nminLon, maxLon = 5.87, 15.04\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\n\nparallels = np.arange(45, 56, 5)\nmeridians = np.arange(0, 16, 5)\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=14, linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=14, \n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of Germany with Elevation Data', fontsize=20)\n\n# Save the figure and display it.\n\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = 47.27, 55.1 minLon, maxLon = 5.87, 15.04  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k')  # Add the parallels and meridians.  parallels = np.arange(45, 56, 5) meridians = np.arange(0, 16, 5) m.drawparallels(     parallels,      labels=[1, 0, 0, 0],      fontsize=14, linewidth=0.5 ) m.drawmeridians(     meridians,      labels=[0, 0, 0, 1],      fontsize=14,      linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of Germany with Elevation Data', fontsize=20)  # Save the figure and display it.  plt.show()  In\u00a0[2]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = 47.27, 55.1\nminLon, maxLon = 5.87, 15.04\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n# m.fillcontinents(color='k', lake_color='aqua')\nm.drawrivers(color='aqua')\n\n# Add the parallels and meridians.\n\nparallels = np.arange(45, 56, 5)\nmeridians = np.arange(0, 16, 5)\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=14, linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=14, \n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of Germany with River Data', fontsize=20)\n\n# Create a dummy image for the colorbar.\n\nim = ax.imshow(np.zeros((4, 4)), cmap='Blues', vmin=0, vmax=1)\n\n# Add a colorbar with the specified label and position.\n\n# colorbar = plt.colorbar(im, orientation='horizontal', fraction=0.046, pad=0.1, label='Elevation (m)')\n\n# Save the figure and display it.\n\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = 47.27, 55.1 minLon, maxLon = 5.87, 15.04  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k') # m.fillcontinents(color='k', lake_color='aqua') m.drawrivers(color='aqua')  # Add the parallels and meridians.  parallels = np.arange(45, 56, 5) meridians = np.arange(0, 16, 5) m.drawparallels(     parallels,      labels=[1, 0, 0, 0],      fontsize=14, linewidth=0.5 ) m.drawmeridians(     meridians,      labels=[0, 0, 0, 1],      fontsize=14,      linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of Germany with River Data', fontsize=20)  # Create a dummy image for the colorbar.  im = ax.imshow(np.zeros((4, 4)), cmap='Blues', vmin=0, vmax=1)  # Add a colorbar with the specified label and position.  # colorbar = plt.colorbar(im, orientation='horizontal', fraction=0.046, pad=0.1, label='Elevation (m)')  # Save the figure and display it.  plt.show()  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"showcase/country/draw_India/","title":"India","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = 6, 37\nminLon, maxLon = 68, 99\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\n\nparallels = np.arange(0, 40, 10)\nmeridians = np.arange(70, 100, 10)\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=14, linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=14, \n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of India with Elevation Data', fontsize=20)\n\n# Save the figure and display it.\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = 6, 37 minLon, maxLon = 68, 99  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k')  # Add the parallels and meridians.  parallels = np.arange(0, 40, 10) meridians = np.arange(70, 100, 10) m.drawparallels(     parallels,      labels=[1, 0, 0, 0],      fontsize=14, linewidth=0.5 ) m.drawmeridians(     meridians,      labels=[0, 0, 0, 1],      fontsize=14,      linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of India with Elevation Data', fontsize=20)  # Save the figure and display it. plt.show()  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"showcase/country/draw_India/#india","title":"India\u00b6","text":""},{"location":"showcase/country/draw_Italy/","title":"Italy","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = 35.29, 47.09\nminLon, maxLon = 6.62, 18.79\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\n\nparallels = np.arange(35, 50, 5)\nmeridians = np.arange(5, 20, 5)\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=14, linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=14, \n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of Italy with Elevation Data', fontsize=20)\n\n# Save the figure and display it.\n\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = 35.29, 47.09 minLon, maxLon = 6.62, 18.79  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k')  # Add the parallels and meridians.  parallels = np.arange(35, 50, 5) meridians = np.arange(5, 20, 5) m.drawparallels(     parallels,      labels=[1, 0, 0, 0],      fontsize=14, linewidth=0.5 ) m.drawmeridians(     meridians,      labels=[0, 0, 0, 1],      fontsize=14,      linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of Italy with Elevation Data', fontsize=20)  # Save the figure and display it.  plt.show()  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"showcase/country/draw_Italy/#italy","title":"Italy\u00b6","text":""},{"location":"showcase/country/draw_Japan/","title":"Japan","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = 24, 46\nminLon, maxLon = 122, 153\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\n\nparallels = np.arange(20, 50, 5)\nmeridians = np.arange(120, 160, 5)\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=14, linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=14, \n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of Japan with Elevation Data', fontsize=20)\n\n# Save the figure and display it.\n\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = 24, 46 minLon, maxLon = 122, 153  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k')  # Add the parallels and meridians.  parallels = np.arange(20, 50, 5) meridians = np.arange(120, 160, 5) m.drawparallels(     parallels,      labels=[1, 0, 0, 0],      fontsize=14, linewidth=0.5 ) m.drawmeridians(     meridians,      labels=[0, 0, 0, 1],      fontsize=14,      linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of Japan with Elevation Data', fontsize=20)  # Save the figure and display it.  plt.show()  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"showcase/country/draw_Japan/#japan","title":"Japan\u00b6","text":""},{"location":"showcase/country/draw_Korea/","title":"Korea","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = 32, 39\nminLon, maxLon = 124, 132\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\n\nparallels = np.arange(30, 40, 1)\nmeridians = np.arange(120, 135, 1)\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=14, linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=14, \n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of South Korea with Elevation Data', fontsize=20)\n\n# Save the figure and display it.\n\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = 32, 39 minLon, maxLon = 124, 132  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k')  # Add the parallels and meridians.  parallels = np.arange(30, 40, 1) meridians = np.arange(120, 135, 1) m.drawparallels(     parallels,      labels=[1, 0, 0, 0],      fontsize=14, linewidth=0.5 ) m.drawmeridians(     meridians,      labels=[0, 0, 0, 1],      fontsize=14,      linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of South Korea with Elevation Data', fontsize=20)  # Save the figure and display it.  plt.show()  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"showcase/country/draw_Korea/#korea","title":"Korea\u00b6","text":""},{"location":"showcase/country/draw_Oceania/","title":"Oceania","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = -50, 10\nminLon, maxLon = 110, 180\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\n\nparallels = np.arange(-50, 11, 10)\nmeridians = np.arange(110, 181, 10)\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=14, linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=14, \n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of Oceania with Elevation Data', fontsize=20)\n\n# Save the figure and display it.\n\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = -50, 10 minLon, maxLon = 110, 180  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k')  # Add the parallels and meridians.  parallels = np.arange(-50, 11, 10) meridians = np.arange(110, 181, 10) m.drawparallels(     parallels,      labels=[1, 0, 0, 0],      fontsize=14, linewidth=0.5 ) m.drawmeridians(     meridians,      labels=[0, 0, 0, 1],      fontsize=14,      linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of Oceania with Elevation Data', fontsize=20)  # Save the figure and display it.  plt.show()  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"showcase/country/draw_Oceania/#oceania","title":"Oceania\u00b6","text":""},{"location":"showcase/country/draw_Russia/","title":"Russia","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = 41, 82\nminLon, maxLon = 19, 180\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\n\nparallels = np.arange(40, 90, 10)\nmeridians = np.arange(20, 181, 20)\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=14, linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=14, \n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of Russia with Elevation Data', fontsize=20)\n\n# Save the figure and display it.\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = 41, 82 minLon, maxLon = 19, 180  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k')  # Add the parallels and meridians.  parallels = np.arange(40, 90, 10) meridians = np.arange(20, 181, 20) m.drawparallels(     parallels,      labels=[1, 0, 0, 0],      fontsize=14, linewidth=0.5 ) m.drawmeridians(     meridians,      labels=[0, 0, 0, 1],      fontsize=14,      linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of Russia with Elevation Data', fontsize=20)  # Save the figure and display it. plt.show()  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"showcase/country/draw_Russia/#russia","title":"Russia\u00b6","text":""},{"location":"showcase/country/draw_Singapore/","title":"Singapore","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = 1.15, 1.5\nminLon, maxLon = 103.55, 104.05\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\n\nparallels = np.arange(1, 2, 0.1)\nmeridians = np.arange(103.5, 104.2, 0.1)\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=14, linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=14, \n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of Singapore with Elevation Data', fontsize=20)\n\n# Save the figure and display it.\n\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = 1.15, 1.5 minLon, maxLon = 103.55, 104.05  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k')  # Add the parallels and meridians.  parallels = np.arange(1, 2, 0.1) meridians = np.arange(103.5, 104.2, 0.1) m.drawparallels(     parallels,      labels=[1, 0, 0, 0],      fontsize=14, linewidth=0.5 ) m.drawmeridians(     meridians,      labels=[0, 0, 0, 1],      fontsize=14,      linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of Singapore with Elevation Data', fontsize=20)  # Save the figure and display it.  plt.show()  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"showcase/country/draw_Singapore/#singapore","title":"Singapore\u00b6","text":""},{"location":"showcase/country/draw_Taiwan/","title":"Taiwan","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = 21.75, 25.5\nminLon, maxLon = 119.25, 122.5\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\n\nparallels = np.arange(21., 26.1, 1.)\nmeridians = np.arange(119., 123.1, 1.)\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=14, linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=14, \n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of Taiwan with Elevation Data', fontsize=20)\n\n# Save the figure and display it.\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = 21.75, 25.5 minLon, maxLon = 119.25, 122.5  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k')  # Add the parallels and meridians.  parallels = np.arange(21., 26.1, 1.) meridians = np.arange(119., 123.1, 1.) m.drawparallels(     parallels,      labels=[1, 0, 0, 0],      fontsize=14, linewidth=0.5 ) m.drawmeridians(     meridians,      labels=[0, 0, 0, 1],      fontsize=14,      linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of Taiwan with Elevation Data', fontsize=20)  # Save the figure and display it. plt.show() In\u00a0[2]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = 21.75, 25.5\nminLon, maxLon = 119.25, 122.5\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\nm.drawrivers(color='aqua')\n\n# Add the parallels and meridians.\n\nparallels = np.arange(21., 26.1, 1.)\nmeridians = np.arange(119., 123.1, 1.)\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=14, linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=14, \n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of Taiwan with River Data', fontsize=20)\n\ncolorbar = plt.colorbar(im, fraction=0.046, pad=0.04, label='Elevation (m)')\n\n# Save the figure and display it.\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = 21.75, 25.5 minLon, maxLon = 119.25, 122.5  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k') m.drawrivers(color='aqua')  # Add the parallels and meridians.  parallels = np.arange(21., 26.1, 1.) meridians = np.arange(119., 123.1, 1.) m.drawparallels(     parallels,      labels=[1, 0, 0, 0],      fontsize=14, linewidth=0.5 ) m.drawmeridians(     meridians,      labels=[0, 0, 0, 1],      fontsize=14,      linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of Taiwan with River Data', fontsize=20)  colorbar = plt.colorbar(im, fraction=0.046, pad=0.04, label='Elevation (m)')  # Save the figure and display it. plt.show() <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[2], line 57\n     53 # Set the title of the plot.\n     55 plt.title('Map of Taiwan with River Data', fontsize=20)\n---&gt; 57 colorbar = plt.colorbar(im, fraction=0.046, pad=0.04, label='Elevation (m)')\n     59 # Save the figure and display it.\n     60 plt.show()\n\nNameError: name 'im' is not defined</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"showcase/country/draw_Taiwan/#taiwan","title":"Taiwan\u00b6","text":""},{"location":"showcase/country/draw_UK/","title":"United Kingdom","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = 49.5, 60.5\nminLon, maxLon = -11.5, 2.0\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\n\nparallels = np.arange(50, 61, 2)\nmeridians = np.arange(-10, 3, 2)\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=14, linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=14, \n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of UK with Elevation Data', fontsize=20)\n\n# Save the figure and display it.\n\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = 49.5, 60.5 minLon, maxLon = -11.5, 2.0  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k')  # Add the parallels and meridians.  parallels = np.arange(50, 61, 2) meridians = np.arange(-10, 3, 2) m.drawparallels(     parallels,      labels=[1, 0, 0, 0],      fontsize=14, linewidth=0.5 ) m.drawmeridians(     meridians,      labels=[0, 0, 0, 1],      fontsize=14,      linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of UK with Elevation Data', fontsize=20)  # Save the figure and display it.  plt.show()  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"showcase/country/draw_UK/#united-kingdom","title":"United Kingdom\u00b6","text":""},{"location":"showcase/country/draw_USA/","title":"USA","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = 24.396308, 49.384358\nminLon, maxLon = -125.000000, -66.934570\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\n\nparallels = np.arange(20, 60, 10)\nmeridians = np.arange(-130, -60, 10)\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=14, linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=14, \n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of USA with Elevation Data', fontsize=20)\n\n# Save the figure and display it.\n\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = 24.396308, 49.384358 minLon, maxLon = -125.000000, -66.934570  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k')  # Add the parallels and meridians.  parallels = np.arange(20, 60, 10) meridians = np.arange(-130, -60, 10) m.drawparallels(     parallels,      labels=[1, 0, 0, 0],      fontsize=14, linewidth=0.5 ) m.drawmeridians(     meridians,      labels=[0, 0, 0, 1],      fontsize=14,      linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of USA with Elevation Data', fontsize=20)  # Save the figure and display it.  plt.show()  In\u00a0[2]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = 24.396308, 49.384358\nminLon, maxLon = -125.000000, -66.934570\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\n\nparallels = np.arange(20, 60, 10)\nmeridians = np.arange(-130, -60, 10)\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=14, linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=14, \n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of USA with Elevation Data', fontsize=20)\n\n# Create a dummy image for the colorbar.\n\nim = ax.imshow(np.zeros((4, 4)), cmap='Blues', vmin=0, vmax=1)\n\n# Add a colorbar with the specified label and position.\n\ncolorbar = plt.colorbar(im, fraction=0.046, pad=0.1, label='Elevation (m)')\n\n# Save the figure and display it.\n\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = 24.396308, 49.384358 minLon, maxLon = -125.000000, -66.934570  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k')  # Add the parallels and meridians.  parallels = np.arange(20, 60, 10) meridians = np.arange(-130, -60, 10) m.drawparallels(     parallels,      labels=[1, 0, 0, 0],      fontsize=14, linewidth=0.5 ) m.drawmeridians(     meridians,      labels=[0, 0, 0, 1],      fontsize=14,      linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of USA with Elevation Data', fontsize=20)  # Create a dummy image for the colorbar.  im = ax.imshow(np.zeros((4, 4)), cmap='Blues', vmin=0, vmax=1)  # Add a colorbar with the specified label and position.  colorbar = plt.colorbar(im, fraction=0.046, pad=0.1, label='Elevation (m)')  # Save the figure and display it.  plt.show()"},{"location":"showcase/country/draw_USA/#usa","title":"USA\u00b6","text":""},{"location":"showcase/country/draw_Ukraine/","title":"Ukraine","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Set the latitudinal and longitudinal limits of the map.\n\nminLat, maxLat = 44, 53\nminLon, maxLon = 22, 41\n\n# Create a figure and axes object.\n\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection and limits.\n\nm = Basemap(\n    projection='cyl',\n    resolution='h',\n    llcrnrlat=minLat,\n    urcrnrlat=maxLat,\n    llcrnrlon=minLon,\n    urcrnrlon=maxLon,\n    ax=ax\n)\n\n# Draw the blue marble background.\n\nm.bluemarble()\n\n# Add the coastline and country boundaries.\n\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\n\nparallels = np.arange(40, 60, 5)\nmeridians = np.arange(20, 45, 5)\nm.drawparallels(\n    parallels, \n    labels=[1, 0, 0, 0], \n    fontsize=14, linewidth=0.5\n)\nm.drawmeridians(\n    meridians, \n    labels=[0, 0, 0, 1], \n    fontsize=14, \n    linewidth=0.5\n)\n\n# Set the title of the plot.\n\nplt.title('Map of Ukraine with Elevation Data', fontsize=20)\n\n# Save the figure and display it.\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Set the latitudinal and longitudinal limits of the map.  minLat, maxLat = 44, 53 minLon, maxLon = 22, 41  # Create a figure and axes object.  fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection and limits.  m = Basemap(     projection='cyl',     resolution='h',     llcrnrlat=minLat,     urcrnrlat=maxLat,     llcrnrlon=minLon,     urcrnrlon=maxLon,     ax=ax )  # Draw the blue marble background.  m.bluemarble()  # Add the coastline and country boundaries.  m.drawcoastlines(color='k') m.drawcountries(color='k')  # Add the parallels and meridians.  parallels = np.arange(40, 60, 5) meridians = np.arange(20, 45, 5) m.drawparallels(     parallels,      labels=[1, 0, 0, 0],      fontsize=14, linewidth=0.5 ) m.drawmeridians(     meridians,      labels=[0, 0, 0, 1],      fontsize=14,      linewidth=0.5 )  # Set the title of the plot.  plt.title('Map of Ukraine with Elevation Data', fontsize=20)  # Save the figure and display it. plt.show()  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"showcase/country/draw_Ukraine/#ukraine","title":"Ukraine\u00b6","text":""},{"location":"showcase/country/draw_global/","title":"Global Map","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nfrom mpl_toolkits.basemap import Basemap\nimport numpy as np\n\n# Create a figure and axes object.\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n\n# Create a Basemap object with the specified projection.\nm = Basemap(projection='cyl', resolution='h', ax=ax)\n\n# Draw the blue marble background.\nm.bluemarble()\n\n# Add the coastlines and country boundaries.\nm.drawcoastlines(color='k')\nm.drawcountries(color='k')\n\n# Add the parallels and meridians.\nparallels = np.arange(-90, 91, 30)\nmeridians = np.arange(-180, 181, 60)\nm.drawparallels(parallels, labels=[1, 0, 0, 0], fontsize=12, linewidth=0.5)\nm.drawmeridians(meridians, labels=[0, 0, 0, 1], fontsize=12, linewidth=0.5)\n\n# Set the title of the plot.\nplt.title('Global Map with Elevation Data', fontsize=20)\n\n# Save the figure and display it.\nplt.show()\n</pre> import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap import numpy as np  # Create a figure and axes object. fig = plt.figure(figsize=(8, 8)) ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])  # Create a Basemap object with the specified projection. m = Basemap(projection='cyl', resolution='h', ax=ax)  # Draw the blue marble background. m.bluemarble()  # Add the coastlines and country boundaries. m.drawcoastlines(color='k') m.drawcountries(color='k')  # Add the parallels and meridians. parallels = np.arange(-90, 91, 30) meridians = np.arange(-180, 181, 60) m.drawparallels(parallels, labels=[1, 0, 0, 0], fontsize=12, linewidth=0.5) m.drawmeridians(meridians, labels=[0, 0, 0, 1], fontsize=12, linewidth=0.5)  # Set the title of the plot. plt.title('Global Map with Elevation Data', fontsize=20)  # Save the figure and display it. plt.show()  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"showcase/country/draw_global/#global-map","title":"Global Map\u00b6","text":""}]}